{"/docs/":{"data":{"-hello-welcome-to-the-rf-swift-documentation#üëã Hello! Welcome to the RF Swift documentation!":"üëã Hello! Welcome to the RF Swift documentation!\nSupported OSes Supported architectures Presented at Socials ","comprehensive-container-orchestration#Comprehensive Container Orchestration":"RF Swift provides a complete orchestration solution that goes beyond traditional containers. Unlike standard Docker, RF Swift simplifies the entire workflow with a straightforward learning curve:\ngraph TD A[rfswift] --\u003e B[Host manager] B --\u003e C[Host] B --\u003e D[USB] B --\u003e F[Sound] B --\u003e G[Images Container manager] H[Dockerfiles] --\u003e G G --\u003e I[Pull] G --\u003e J[List] G --\u003e K[Save] G --\u003e L[Tag] G --\u003e M[Run] G --\u003e N[Exec] style A fill:#f9f,stroke:#333,stroke-width:4px style B fill:#bbf,stroke:#333,stroke-width:2px style H fill:#afa,stroke:#333,stroke-width:2px style G fill:#bbf,stroke:#333,stroke-width:2pxRF Swift handles everything from container creation and execution to pulling images, committing changes, and re-tagging. What sets it apart is the seamless integration of USB, video, and audio forwarding in a user-friendly interface‚Äîtasks that typically require significant expertise in standard Docker environments.\nKey Components Go binary (rfswift) - Instruments containers and hosts to simplify the use of tools that may require:\nInternet connectivity Display Sounds USB accesses This rfswift is the main program you will interact with to:\nRun clean containers Execute inside running or paused containers Perform many magic actions that will make things work without a headache Docker images - Pre-built Docker container images are available in RF Swift‚Äôs repository. In case you want to bake your own environment, preserve some space, and have a special set-up, you will also find some Docker files you can edit to fit your expectations.","key-benefits-of-rf-swift#Key Benefits of RF Swift":" Flexibility: Use RF tools without disrupting your daily work environment Efficiency: Deploy only the tools you need, when you need them Security: Strong isolation between containers prevents cross-contamination Portability: Works across multiple architectures with consistent experience Resource Management: Optimized resource usage compared to full VMs ","next-steps#Next Steps":"Dive right into the following section to get started:\nGetting StartedLearn how to run RF Swift Compile RF Swift binaryCompile RF Swift and develop around the framework ","questions-or-feedback#Questions or Feedback?":" ‚ùì RF Swift is still in active development. Have a question or feedback? Feel free to open an issue! ","rf-swift-vs-kali-linux-vs-dragon-os-comparison#RF Swift vs. Kali Linux vs. Dragon OS Comparison":" Feature RF Swift Kali Linux Dragon OS üñ•Ô∏è Host OS Preservation ‚úÖ Runs alongside your existing OS ‚ùå Typically requires dedicated partition or VM ‚ùå Typically requires dedicated partition or VM üß∞ Tool Isolation ‚úÖ Tools run in containers without impacting system ‚ö†Ô∏è Tools can affect system stability ‚ö†Ô∏è Tools can affect system stability üöÄ Deployment Speed ‚úÖ Fast container deployment ‚ùå Full OS installation required ‚ùå Full OS installation required üì¶ VM Requirement ‚úÖ No VM needed ‚ö†Ô∏è Needs VM for non-dedicated machines ‚ö†Ô∏è Needs VM for non-dedicated machines üîß Tool Availability ‚úÖ Extensive tool collection for hardware security, RF, reversing, and more. ‚úÖ Extensive tool collection for generic pentests ‚úÖ Specialized for RF üîÑ Tool Updates ‚úÖ Easily updated containers ‚ö†Ô∏è Requires system updates ‚ö†Ô∏è Requires system updates üíæ Storage Efficiency ‚úÖ Customizable to fit small storage ‚ùå Requires significant disk space ‚ùå Requires significant disk space üõ°Ô∏è Security Isolation ‚úÖ Strong container isolation (custom confinement) ‚ö†Ô∏è Limited isolation between applications ‚ö†Ô∏è Limited isolation between applications üîå Network Containment ‚úÖ Can isolate network activity ‚ö†Ô∏è Network isolation requires additional setup ‚ö†Ô∏è Network isolation requires additional setup üèóÔ∏è Architecture Support ‚úÖ x86_64, ARM64, RISCV64 ‚úÖ x86_64, ARM64 ‚ö†Ô∏è Primarily x86_64 üß© Customization ‚úÖ Highly customizable (specific tools only) ‚úÖ Customizable but affects whole system ‚ö†Ô∏è Limited customization üì± USB Device Access ‚úÖ Streamlined USB forwarding ‚úÖ Direct access ‚úÖ Direct access üîä Audio Support ‚úÖ Container-based audio support ‚úÖ Native audio support ‚úÖ Native audio support üåê Internet Connectivity ‚úÖ Configurable per container ‚úÖ System-wide configuration ‚úÖ System-wide configuration ","use-case-scenarios#Use Case Scenarios":" Scenario RF Swift Kali Linux Dragon OS Quick assessment on personal device ‚≠ê‚≠ê‚≠ê ‚≠ê ‚≠ê Deployment on a burner laptop ‚≠ê‚≠ê‚≠ê ‚≠ê ‚≠ê Low storage environments ‚≠ê‚≠ê‚≠ê ‚≠ê ‚≠ê Multiple architecture development ‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê ‚≠ê Isolated testing environment ‚≠ê‚≠ê‚≠ê ‚≠ê ‚ùå Organization of traces ‚≠ê‚≠ê‚≠ê ‚ùå ‚ùå ","what-is-rf-swift#What is RF Swift?":"RF Swift is a toolbox for creating an environment laboratory for your RF assessments, that can easily fit your prerequirements.\nThis toolbox is probably the best solution to deploy a generic, as well as a special environment securely, skipping the headache and waste of time when installing and using RF tools on same host.\n‚ö†Ô∏è Even if the project could work on macOS with some manual workaround, we do not advertise it for the moment, but this system will be fully supported in the near future. "},"title":"Documentation"},"/docs/container_scripts/":{"data":{"available-scripts#Available Scripts":" Avahi Container ScriptEnable service discovery for PlutoSDR and network devices LibreSDR Firmware SwapUpgrade USRP B210/B220 with enhanced FPGA firmware RF Scripts UpdaterKeep your RF Swift scripts updated with the latest versions ","next-steps#Next Steps":"Explore each script‚Äôs dedicated documentation for detailed usage instructions, examples, and technical details.","overview#Overview":"RF Swift provides several utility scripts that simplify common tasks inside containers. These scripts enable advanced functionality, streamline configuration, and help you get the most out of your RF and hardware tools.","rf-swift-container-scripts#RF Swift Container Scripts":"RF Swift Container Scripts","script-categories#Script Categories":"Service Enablement Scripts that activate or configure services inside containers:\nAvahi Container Script: Enables mDNS service discovery Hardware Enhancement Scripts that modify or optimize hardware functionality:\nLibreSDR Firmware Swap: Enhances USRP devices with improved firmware Maintenance Scripts that help keep your environment updated and optimized:\nRF Scripts Updater: Synchronizes local scripts with the latest versions ","troubleshooting#Troubleshooting":"If you encounter issues with container scripts:\nEnsure the script has execute permissions (chmod +x scriptname) Check that required dependencies are installed in the container Verify you have the necessary permissions for the operation Consult the specific script documentation for troubleshooting guidance ","using-container-scripts#Using Container Scripts":"All container scripts are automatically installed in RF Swift containers and available in the system PATH. You can execute them directly from any directory inside the container:\n# Example: Start Avahi service discovery avahicontainer_start # Example: Update RF scripts update_rfscripts # Example: Swap USRP firmware libresdr_swapfpga ","why-container-scripts#Why Container Scripts?":"Container scripts extend RF Swift‚Äôs capabilities by:\nSimplifying Complex Tasks: Turn multi-step processes into single commands Enhancing Device Compatibility: Improve functionality with specialized hardware Maintaining Updates: Keep tools and utilities current with minimal effort Enabling Advanced Features: Access capabilities not available in standard configurations "},"title":"üõ†Ô∏è Container Scripts"},"/docs/container_scripts/avahi_inside_container/":{"data":{"advanced-usage#Advanced Usage":"Auto-Starting Avahi To automatically start Avahi when running a container:\nrfswift run -i sdr_full -n pluto_container -e \"avahicontainer_start \u0026\u0026 /bin/bash\" Custom Service Files You can add custom Avahi service files to advertise specific services:\n# Create a custom service file cat \u003e /etc/avahi/services/myservice.service \u003c\u003c EOF \u003c?xml version=\"1.0\" standalone='no'?\u003e \u003c!DOCTYPE service-group SYSTEM \"avahi-service.dtd\"\u003e \u003cservice-group\u003e \u003cname\u003eMyCustomService\u003c/name\u003e \u003cservice\u003e \u003ctype\u003e_myservice._tcp\u003c/type\u003e \u003cport\u003e12345\u003c/port\u003e \u003c/service\u003e \u003c/service-group\u003e EOF # Restart Avahi to apply avahi-daemon -r ","overview#Overview":"The avahicontainer_start script is a utility included in RF Swift containers to enable service discovery through Avahi. This script is particularly useful when working with PlutoSDR and other devices that rely on zeroconf/mDNS discovery.","script-details#Script Details":"The avahicontainer_start script in /usr/sbin initializes the D-Bus daemon and Avahi service within a container:\nWhat This Script Does Create D-Bus Directory: Creates the /var/run/dbus directory if it doesn‚Äôt exist Start D-Bus Daemon: Launches the D-Bus system daemon in the background Wait Period: Pauses for 2 seconds to ensure D-Bus is fully initialized Start Avahi Daemon: Launches the Avahi daemon in daemon mode (-D) ","troubleshooting#Troubleshooting":"Common Issues If the script doesn‚Äôt solve your service discovery issues:\nNetwork Configuration: Ensure your container is using the host network (the default for RF Swift)\n# Check network mode of your container rfswift container list Firewall Settings: Multicast DNS uses UDP port 5353 - ensure it‚Äôs not blocked\n# Check if multicast traffic is allowed sudo iptables -L | grep 5353 Multiple Avahi Instances: Sometimes conflicts occur if the host is also running Avahi\n# On your host system, temporarily stop Avahi if needed sudo systemctl stop avahi-daemon ","using-the-avahi-container-start-script#Using the Avahi Container Start Script":"Using the Avahi Container Start Script","using-the-script#Using the Script":"Manual Execution To manually start Avahi in a running container:\n# Inside your RF Swift container avahicontainer_start Verifying It‚Äôs Working After running the script, you can verify that Avahi is properly running:\n# Check if Avahi is running ps aux | grep avahi # Test service discovery avahi-browse -a PlutoSDR Example When working with PlutoSDR, you can use this script to enable automatic discovery:\n# Start Avahi service avahicontainer_start # Wait a moment for services to register sleep 2 # Find PlutoSDR on the network iio_info -s # Should show something like: # Available IIO contexts: # Context 0: ip:pluto.local ","when-to-use-this-script#When to Use This Script":"Use the avahicontainer_start script when:\nWorking with PlutoSDR or similar devices that use network service discovery Running tools that require mDNS (multicast DNS) or service discovery Encountering ‚ÄúAvahi daemon not running‚Äù or similar errors "},"title":"Avahi Container Start Script"},"/docs/container_scripts/libresdr_swap_firmware/":{"data":{"important-notes#Important Notes":" Always backup your original firmware before making any changes After changing firmware, you may need to restart any applications using the USRP device Some LibreSDR features may require specific software support The enhanced firmware may consume more power or generate more heat during operation ","libresdr-fpga-swap-utility#LibreSDR FPGA Swap Utility":"LibreSDR FPGA Swap Utility","overview#Overview":"The libresdr_swapfpga utility allows you to easily switch between different FPGA firmware binaries for USRP B210/B220 devices when using them with LibreSDR. This tool provides a simple interface to backup, replace, and restore FPGA firmware files, enabling enhanced functionality with LibreSDR modifications.","technical-details#Technical Details":"File Locations The utility manages the following files:\nOriginal firmware: /usr/share/uhd/images/usrp_b210_fpga.bin Backup location: /usr/share/uhd/images/usrp_b210_fpga_backup.bin LibreSDR B210: /rftools/sdr/libresdr/libresdr_b210.bin LibreSDR B220: /rftools/sdr/libresdr/libresdr_b220.bin System Requirements Root privileges (required to modify files in /usr/share/uhd/images/) UHD (USRP Hardware Driver) installed LibreSDR firmware files ","troubleshooting#Troubleshooting":"Common Issues Device not recognized after firmware swap:\nDisconnect and reconnect the device Restart the UHD service: sudo systemctl restart uhd Errors during firmware replacement:\nEnsure you have sufficient disk space Verify that the LibreSDR firmware files exist in the correct location Permission issues:\nThe utility must be run with sudo or as root Restoring from Command Line If you need to restore the original firmware without the utility:\nsudo cp /usr/share/uhd/images/usrp_b210_fpga_backup.bin /usr/share/uhd/images/usrp_b210_fpga.bin ","using-the-utility#Using the Utility":"Running the Utility The utility must be run with root privileges:\nsudo libresdr_swapfpga Main Menu Options The utility presents a menu with four options:\nWhat would you like to do? 1) Backup the original binary 2) Replace the original binary 3) Restore the backup binary 4) Exit 1. Backup the Original Binary Before making any changes, it‚Äôs recommended to back up the original FPGA firmware:\nEnter your choice [1-4]: 1 This creates a backup at: /usr/share/uhd/images/usrp_b210_fpga_backup.bin\nIf a backup already exists, this operation will be skipped to prevent overwriting your existing backup.\n2. Replace the Original Binary To replace the original firmware with a LibreSDR version:\nEnter your choice [1-4]: 2 You‚Äôll be presented with two replacement options:\nSelect the binary to replace the original: 1) libresdr_b210.bin 2) libresdr_b220.bin 3) Cancel libresdr_b210.bin: Enhanced firmware for USRP B210 devices libresdr_b220.bin: Enhanced firmware for USRP B220 devices 3. Restore the Backup Binary If you need to revert to the original firmware:\nEnter your choice [1-4]: 3 This will restore the previously backed-up firmware file.\n4. Exit To exit the utility:\nEnter your choice [1-4]: 4 ","what-this-utility-does#What This Utility Does":"This utility manages the FPGA firmware files that control the behavior of USRP B210/B220 software-defined radio devices. It allows you to:\nBackup the original USRP FPGA firmware Replace the firmware with LibreSDR-enhanced versions Restore the original firmware when needed ","when-to-use-this-utility#When to Use This Utility":"Use the libresdr_swapfpga utility when:\nYou want to enhance your USRP B210/B220 with LibreSDR capabilities You need to switch between different FPGA firmware versions for testing You want to restore the original firmware for standard UHD operation "},"title":"LibreSDR FPGA Swap Utility"},"/docs/container_scripts/rfswift_install/":{"data":{"customization#Customization":"If you need to modify the default behavior of the script updater:\nChanging the Target Directory Edit the update_rfscripts file to change the TARGET_DIR variable:\n# Original TARGET_DIR=\"$(pwd)/scripts\" # Modified example (specific directory) TARGET_DIR=\"/opt/rfswift/scripts\" Preserving Local Modifications If you‚Äôve made local changes to scripts that you want to keep, remove the --delete option from the rsync command:\n# Change from rsync -av --delete \"$TEMP_DIR/\" \"$TARGET_DIR/\" # To rsync -av \"$TEMP_DIR/\" \"$TARGET_DIR/\" ","overview#Overview":"The update_rfscripts utility is a tool that keeps your local RF Swift scripts synchronized with the latest versions from the official repository. This ensures you always have access to the most recent tools, fixes, and improvements without manually downloading and managing script files.","related-documentation#Related Documentation":" RF Swift Utilities Custom Script Development Troubleshooting ","rf-scripts-update-utility#RF Scripts Update Utility":"RF Scripts Update Utility","script-location-and-usage#Script Location and Usage":"Where Scripts Are Installed The utility installs all scripts to the scripts directory in your home folder:\n~/scripts/ Using the Updated Scripts After updating, you can use the scripts directly from your home directory. For example:\n# Run a specific script ~/scripts/entrypoint.sh tool_name_install # Or add to your PATH for easier access echo 'export PATH=\"$HOME/scripts:$PATH\"' \u003e\u003e ~/.bashrc source ~/.bashrc ","technical-details#Technical Details":"Repository Source The scripts are downloaded from the official RF Swift images repository:\nhttps://github.com/PentHertz/RF-Swift-images Update Process The utility uses a four-step process:\nPreparation: Creates necessary directories and sets up a temporary workspace Download: Uses curl and tar to fetch only the scripts folder from the repository Synchronization: Uses rsync with the --delete option to ensure your local directory exactly matches the repository Finalization: Sets executable permissions and cleans up temporary files File Handling The utility uses rsync with the following options:\n-a: Archive mode (preserves permissions, timestamps, etc.) -v: Verbose output so you can see which files are updated --delete: Removes local files that no longer exist in the repository ","troubleshooting#Troubleshooting":"Common Issues Network Connection Errors\nEnsure you have a working internet connection Check if GitHub is accessible from your network Permission Errors\nIf you see permission errors, check the ownership of your scripts directory: ls -la ~/scripts Ensure you have write permissions to the directory: chmod u+w ~/scripts Execution Fails After Update\nIf scripts won‚Äôt execute after updating, check the permissions: chmod +x ~/scripts/*.sh ","using-the-utility#Using the Utility":"Running the Utility To update your RF scripts, simply run:\nupdate_rfscripts No root privileges are required, as the scripts are installed to your user‚Äôs home directory.\nWhat to Expect When you run the utility, you‚Äôll see a series of colored messages indicating the progress:\nYellow text: Indicates the creation of new directories (if needed) Blue text: Shows progress information as files are downloaded and copied Red text: Alerts you to any errors (hopefully you won‚Äôt see these) Green text: Confirms successful completion of the update Example output:\nFetching file list from https://github.com/PentHertz/RF-Swift-images Updating scripts in /home/user/scripts sending incremental file list ./ automotive_software.sh cal_devices.sh common.sh corebuild.sh entrypoint.sh gr_oot_modules.sh lab_software.sh reverse_software.sh ... Cleaning up temporary files Update completed successfully. ","what-this-utility-does#What This Utility Does":"The utility performs several operations to update your local scripts directory:\nCreates a scripts directory in your home folder if it doesn‚Äôt exist Downloads the latest scripts from the RF-Swift-images GitHub repository Synchronizes the files to your local directory, adding new files and updating existing ones Sets proper permissions on the scripts to make them executable Cleans up any temporary files used during the update process ","when-to-use-this-utility#When to Use This Utility":"Use the update_rfscripts utility:\nAfter a new RF Swift release to get the latest scripts When you need access to newly added tools If you suspect your scripts might be outdated Before starting a new RF assessment to ensure you have the latest capabilities "},"title":"RF Scripts Update Utility"},"/docs/development/":{"data":{"community-resources#Community Resources":"Join the RF Swift community to get help with development:\nDiscord: Join our Discord server GitHub Issues: Report bugs or request features Documentation: Refer to the API Reference (coming soon) üöß Additional development documentation is being actively created. We welcome contributions to the documentation, especially for specialized development scenarios and custom image creation. ","cross-platform-development#Cross-Platform Development":"RF Swift supports multiple platforms and architectures. When developing:\nTest on multiple operating systems when possible Use BuildX for cross-platform container builds Consider architecture-specific optimizations for ARM64 and RISC-V ","development-environment-setup#Development Environment Setup":"Before diving into RF Swift development, ensure your environment meets these prerequisites:\nPrerequisites Go 1.20+: Required for compiling the RF Swift binary Docker: Required for building and testing container images BuildX: Required for cross-platform image building Git: Required for source code management ","getting-started-with-development#Getting Started with Development":"RF Swift is designed to be extensible and customizable. You can tailor it to your specific RF assessment needs by:\nCompiling the binary from source with custom features or for specific architectures Building custom container images with specialized tools Contributing to the core project by adding new features or fixing issues ","key-development-areas#Key Development Areas":" Compile RF Swift BinaryBuild the RF Swift binary from source for different platforms and architectures Building Custom ImagesCreate specialized Docker images with your preferred RF and security tools ","rf-swift-development-guide#RF Swift Development Guide":"RF Swift Development GuideThis section covers topics related to developing with RF Swift, building custom components, and contributing to the project. Whether you want to compile the RF Swift binary from source, create custom container images, or extend the project‚Äôs capabilities, you‚Äôll find the necessary guidance here."},"title":"üßë‚Äçüç≥ Development"},"/docs/development/building-images/":{"data":{"-git-and-source-management#üß¨ Git and Source Management":"gitinstall \u003crepo-url\u003e \u003cmethod\u003e \u003cbranch\u003e Clones or updates a Git repository. On success, logs the repository metadata to /var/lib/db/rfswift_github.lst. Also initializes submodules if needed.\nExample:\ngitinstall \"https://github.com/example/tool.git\" \"tool_install\" \"main\" cmake_clone_and_build \u003crepo-url\u003e \u003cbuild-dir\u003e \u003cbranch\u003e \u003creset-commit\u003e \u003cmethod\u003e [cmake-args...] Clones a Git repository, optionally resets to a specific commit/tag, then configures and builds the project using CMake.\nArguments:\nrepo-url: URL of the Git repository build-dir: Relative build path within the repo branch: Git branch to use (optional) reset-commit: Commit or tag to reset to (optional) method: Name of the install function (used in logs) [cmake-args...]: Additional arguments passed to cmake Example:\ncmake_clone_and_build \"https://github.com/example/project.git\" \"build\" \"main\" \"v1.0.0\" \"mytool_install\" -DENABLE_X=ON grclone_and_build \u003crepo-url\u003e \u003csubdir\u003e \u003cmethod\u003e [-b branch] [cmake-args...] Simplified wrapper for cmake_clone_and_build, designed for GNU Radio OOT modules.\nExample:\ngrclone_and_build \"https://github.com/author/gr-foo.git\" \"gr-foo\" \"gr_foo_install\" -b dev -DENABLE_DOCS=OFF ","-output--logging-functions#üé® Output \u0026amp; Logging Functions":"RF Swift Helper Functions ReferenceThis page documents the Bash helper functions used in the RF Swift container build system. These utilities simplify logging, dependency management, source code builds, and network operations.\nMost helpers implement retry logic and consistent logging to ensure resilience and ease of use when building custom images or tools.\nüé® Output \u0026 Logging Functions Function Description colorecho \u003cmessage\u003e Prints a blue-colored message to indicate neutral info goodecho \u003cmessage\u003e Prints a green-colored message for successful actions criticalecho \u003cmessage\u003e Prints a red-colored message and exits with error code 1 criticalecho-noexit \u003cmessage\u003e Prints a red-colored message without exiting Example:\ngoodecho \"Installation complete!\" criticalecho \"An unrecoverable error occurred.\" ","-package-installation-helpers#üì¶ Package Installation Helpers":"installfromnet \u003ccommand\u003e Executes a given shell command up to 5 times with 15-second intervals between attempts. Useful for flaky downloads or network-related tasks.\nExample:\ninstallfromnet \"wget http://example.com/tool.tar.gz\" install_dependencies \"\u003cpackages\u003e\" Installs Debian packages using apt-fast, with retry logic.\nExample:\ninstall_dependencies \"python3-numpy python3-scipy g++\" check_and_install_lib \u003clib-name\u003e \u003cpkg-config-name\u003e Checks whether a library is installed via pkg-config. If not found, attempts to install it via apt-fast.\nExample:\ncheck_and_install_lib \"libusb-1.0-0-dev\" \"libusb-1.0\" ","-python-installer-helper#üêç Python Installer Helper":"pip3install \u003cargs\u003e Installs Python packages using pip3 with retry logic. Supports both single package installs and requirements.txt files.\nExamples:\npip3install scikit-learn pip3install -r requirements.txt ","-summary-table#üß† Summary Table":" Category Function Description Output colorecho Info messages (blue) Output goodecho Success messages (green) Output criticalecho Error + exit (red) Output criticalecho-noexit Error only (red) Install installfromnet Retry logic for flaky commands Install install_dependencies Apt-based dependency installation Install check_and_install_lib Lib check + install via pkg-config Python pip3install Retry pip install Git gitinstall Clone/update and log repos Build cmake_clone_and_build Git clone + CMake build Build grclone_and_build Optimized for GNU Radio modules ","-tips#üí° Tips":" Always use installfromnet when working with downloads or Git operations in Dockerfiles. Group commands in a single RUN line in Dockerfiles to reduce layers. Clean build directories and cache files to keep image size minimal. You can extend the helper library by placing new functions in images/scripts/common.sh or custom scripts. ","related-docs#Related Docs":" Build Custom ImagesUse these helpers in your own container builds System ConfigurationTune RF Swift for your hardware ContributeImprove or extend these helper functions on GitHub ","rf-swift-helper-functions-reference#RF Swift Helper Functions Reference":""},"title":"Helper Functions Reference"},"/docs/development/compiling-rfswift/":{"data":{"building-rf-swift-from-source#Building RF Swift from Source":"Building RF Swift from SourceThis guide explains how to compile RF Swift from source code, allowing you to customize the binary, contribute to development, or build for specific architectures.","compilation-process#Compilation Process":" Clone the Repository First, clone the RF Swift source code from the official repository:\ngit clone https://github.com/PentHertz/RF-Swift.git cd RF-Swift Build Using Installation Scripts RF Swift provides platform-specific scripts to handle the entire build process:\nLinux/macOS Use the install.sh script which handles all dependencies and compilation:\n./install.sh The script will:\nCheck for and install required dependencies (Docker, BuildX, Go) Compile the RF Swift binary for your architecture Offer to create a system-wide alias for the rfswift command Provide options for building or pulling container images Windows For Windows systems, use the build-windows.bat script:\nbuild-windows.bat This script will set up the required dependencies and compile the RF Swift binary for Windows.\nSpecial Platform: Steam Deck The Linux installation script includes special handling for Steam Deck:\n./install.sh [+] Checking Docker installation Are you installing on a Steam Deck? (yes/no): yes Selecting ‚Äúyes‚Äù will:\nUnlock Steam OS from read-only mode Configure Steam Deck-specific settings Install appropriate dependencies for the Steam Deck hardware Configure Your Installation During installation, you‚Äôll be prompted with several configuration options:\nDo you want to create an alias for the binary? (yes/no): yes Creating an alias allows you to run RF Swift from any directory using the rfswift command.\nAfter compilation completes, you‚Äôll be asked whether to build or pull container images:\nDocker is already installed. Moving on. Docker Buildx is already installed. Moving on. Docker Compose v2 is already installed. Moving on. [+] Installing Go golang is already installed in /usr/local/go/bin. Moving on. [+] Building RF Swift Go Project RF Swift Go Project built successfully. Do you want to build a Docker container, pull an existing image, or exit? 1) Build Docker container 2) Pull Docker image 3) Exit Choose an option (1, 2, or 3): You can choose to:\nBuild a custom container image (option 1) Pull an existing pre-built image from the repository (option 2) Exit and handle images later (option 3) ‚ÑπÔ∏è You can always build or pull images later using the RF Swift command-line interface. Test Your Compilation Once compiled, verify that your RF Swift binary works correctly:\n# If you created an alias rfswift --version # Or using the direct path ./rfswift --version This should display the version information and confirm the binary is functioning properly.","manual-compilation#Manual Compilation":"If you prefer to handle the compilation process manually or need more control over the build, you can follow these steps:\nInstall Dependencies First, ensure you have all required dependencies:\n# Ubuntu/Debian sudo apt update sudo apt install -y git golang-go docker.io # Fedora/CentOS/RHEL sudo dnf install -y git golang docker # Arch Linux sudo pacman -S git go docker # macOS (using Homebrew) brew install go docker Compile the Binary Navigate to the cloned repository and compile the binary:\ncd RF-Swift go build -o rfswift For cross-compilation (building for a different architecture):\n# For ARM64 (e.g., Raspberry Pi) GOOS=linux GOARCH=arm64 go build -o rfswift_arm64 # For Windows GOOS=windows GOARCH=amd64 go build -o rfswift.exe # For macOS GOOS=darwin GOARCH=amd64 go build -o rfswift_macos Install the Binary Move the compiled binary to a location in your PATH:\n# Linux/macOS sudo mv rfswift /usr/local/bin/ sudo chmod +x /usr/local/bin/rfswift # Or for local user only mv rfswift ~/bin/ chmod +x ~/bin/rfswift ","next-steps#Next Steps":"Now that you have successfully compiled RF Swift, you can:\nBuild Custom ImagesCreate your own specialized container images with custom tools Getting StartedLearn how to use RF Swift with pre-built images User GuideExplore the complete RF Swift documentation ","prerequisites#Prerequisites":"Before you begin, ensure your system has sufficient resources:\nAt least 2GB of RAM At least 4GB of free disk space Internet connection (for downloading dependencies) Administrator/root access for installation ","running-rf-swift#Running RF Swift":"After compiling RF Swift, you can start using it to manage containers:\nCreate and Run a Container To create and run a container using an image:\n# With sudo (Linux without Docker Desktop) sudo rfswift run -i penthertz/rfswift:sdr_full -n my_sdr_container # Without sudo (macOS, Windows, or Linux with Docker Desktop) rfswift run -i penthertz/rfswift:sdr_full -n my_sdr_container Resume Existing Containers To resume work with previously created containers:\nrfswift exec -c my_sdr_container ","troubleshooting-compilation-issues#Troubleshooting Compilation Issues":"If you encounter issues during compilation:\nGo Module Issues # Reset the Go module cache go clean -modcache # Try building again go build -o rfswift Docker Permissions # Add your user to the docker group sudo usermod -aG docker $USER # Log out and back in for changes to take effect Dependency Version Conflicts # Force use of specific versions in go.mod go mod edit -require=github.com/some/dependency@v1.2.3 go mod tidy "},"title":"Compiling RF Swift from Source"},"/docs/getting-started/":{"data":{"architecture-overview#Architecture Overview":"RF Swift organizes its functionality in a hierarchical structure:\ngraph TD A[rfswift] --\u003e B[Host manager] B --\u003e C[Host] B --\u003e D[USB] B --\u003e F[Sound] B --\u003e G[Images Container manager] H[Dockerfiles] --\u003e G G --\u003e I[Pull] G --\u003e J[List] G --\u003e K[Save] G --\u003e L[Tag] G --\u003e M[Run] G --\u003e N[Exec] style A fill:#f9f,stroke:#333,stroke-width:4px style B fill:#bbf,stroke:#333,stroke-width:2px style H fill:#afa,stroke:#333,stroke-width:2px style G fill:#bbf,stroke:#333,stroke-width:2pxThis structure allows RF Swift to provide:\nComprehensive container management Host resource integration Device forwarding (USB, audio, display) Streamlined workflow for RF testing and development ","feature-compatibility-matrix#Feature Compatibility Matrix":" Feature Linux Windows macOS Container Execution ‚úÖ ‚úÖ ‚úÖ GUI Applications ‚úÖ ‚úÖ ‚úÖ (with XQuartz) USB Device Forwarding ‚úÖ ‚úÖ (with usbipd) ‚ùå Audio Support ‚úÖ ‚úÖ (with PulseAudio) ‚ùì Limited Hardware Acceleration ‚úÖ ‚ùì Limited ‚ùì Limited Cross-Compilation ‚úÖ ‚úÖ (in WSL) ‚úÖ One-Line Installer ‚úÖ ‚ùå ‚úÖ ","getting-started-with-rf-swift-#Getting Started with RF Swift üöÄ":"Getting Started with RF Swift üöÄThis guide will help you get started with RF Swift by covering system requirements, installation steps, and next actions.","installation#Installation":"RF Swift now offers a streamlined one-line installer that automatically installs all dependencies (including Docker) and configures your system for optimal performance.\nOne-Line Installer (Recommended)Manual Installation One-Line Installer Our new installer takes care of everything for you in a single command! It will:\nInstall Docker if it‚Äôs not already present Download and install the latest RF Swift release Configure your system for USB, audio, and GUI support Create a convenient shell alias for easy access Set up proper permissions and configurations Linux and macOS curl -fsSL \"https://get.rfswift.io/\" | sh Or if you prefer wget:\nwget -qO- \"https://get.rfswift.io/\" | sh After installation completes, simply open a new terminal and run:\nrfswift For security reasons, it is advised to review the script before execution. As we don‚Äôt currently have a fully secured installation method, the recommended approach is to perform a manual installation using the install.sh script provided with each release. Always download the script from the official repository to ensure authenticity. Windows Follow the manual installation steps.\nManual Installation If you prefer to have more control over the installation process, you can install the components separately.\nLinux Manual Installation (Preferred) ‚ÑπÔ∏è On Linux, Docker, BuildX, and Go can be directly installed with the install.sh script included in the repository. Essential Components\nDocker: Required to run RF Swift containers curl -fsSL \"https://get.docker.com/\" | sh xhost: Required for GUI application support (install via your distribution‚Äôs package manager) PulseAudio: Required for audio support (install via your distribution‚Äôs package manager) Optional Components\nGo Compiler: Required if you want to build RF Swift from source BuildX: Required for cross-architecture compilation Repository Installation\n# Clone the repository git clone https://github.com/PentHertz/RF-Swift.git cd RF-Swift # Run the installation script to automatically install all dependencies ./install.sh The install.sh script will:\nInstall Docker if not already present Set up BuildX for cross-architecture support Install Go compiler if needed Configure xhost for GUI application access Set up PulseAudio for sound Configure user permissions for Docker Download and install the latest RF Swift binary Windows Manual Installation Required Software\nDocker Desktop to run containers usbipd to bind USB devices to the host For Audio Support\nFor programs requiring PulseAudio:\nFollow the setup guide on Linux Uprising Use the updated binaries available at pgaskin.net/pulseaudio-win32 ‚ö†Ô∏è Make sure Docker Desktop runs in WSL2 mode for optimal performance and compatibility. Installation Steps\nInstall Docker Desktop and ensure WSL2 integration is enabled Install usbipd for USB device support Set up PulseAudio if audio functionality is needed Download the latest RF Swift binary from the releases page macOS Manual Installation ‚ö†Ô∏è macOS support will be fully implemented soon. Currently, some features may have limited functionality. Current Status\nContainer functionality works without USB forwarding For full functionality including USB device support, running in a Linux VM is recommended Required Software\nDocker Desktop for macOS XQuartz for X11 forwarding (optional) Known Limitations\nUSB device forwarding is not currently supported natively Some specialized RF tools may have compatibility issues ","next-steps#Next Steps":"After installation, you can dive right into:\nQuick StartRunning RF Swift with pre-built images and binary Developing and ContributingCompile binary and build images from sources, contribute to the project ","supported-platforms#Supported Platforms":"RF Swift is designed to work across multiple platforms and architectures to suit your specific environment.\nOperating Systems Platform x86_64/amd64 arm64/v8 riscv64 Windows ‚úÖ Fully supported ‚ùì Limited testing ‚ùå Not supported Linux ‚úÖ Fully supported ‚úÖ Fully supported ‚úÖ Fully supported macOS ‚ùì Limited support ‚úÖ Supported (better inside a VM for USB devices) ‚ùå Not supported Tested Single-Board Computers SBC Status Comments Raspberry Pi 5 ‚úÖ Works perfectly with most tools Milk-V Jupiter ‚úÖ Works perfectly with most tools, but slower than Raspberry Pi 5 Orange Pi RV2 ‚úÖ Works perfectly with most tools, but slower than Milk-V Jupiter Milk-V Mars ‚ùå Software support is currently unavailable. Docker installation is problematic UP Squared Series ‚úÖ Works perfectly with most tools ","system-requirements#System Requirements":"The minimum requirements to run RF Swift are:\nCPU: Any dual-core CPU (quad-core recommended for better performance) RAM: 4GB minimum (8GB or more recommended) Storage: 10GB free space (20GB+ recommended for multiple container images) Docker: Automatically installed by the one-line installer Internet Connection: Required for initial setup and image downloads ","troubleshooting#Troubleshooting":"If you encounter issues during installation or usage:\nCheck the GitHub Issues page for known problems Verify your Docker installation is working correctly with docker run hello-world Ensure you have the required permissions (e.g., user is in the docker group on Linux) Join our Discord community for direct assistance Common Issues with the One-Line Installer If you encounter issues with the one-line installer:\nPermission Denied: Ensure you have sudo privileges for Linux/macOS installation Docker Service Not Starting: Try restarting your system after installation Shell Alias Not Working: Open a new terminal window or manually source your shell configuration file GitHub API Rate Limiting: If you see an error about GitHub API limits, wait a few minutes and try again "},"title":"Getting Started"},"/docs/guide/":{"data":{"":"This section covers topics related on how to run RF Swift and use the different softwares installed default images.\nRunning RF Swift Configurations Container images Included tools Host actions Sharing files "},"title":"üìñ Guide"},"/docs/guide/configurations/":{"data":{"best-practices#Best Practices":" Base Configuration: Set your common preferences in the config.ini file Special Cases: Use command-line flags for one-time or specialized settings Security First: Keep the privileged = false setting when possible and only add specific capabilities as needed Dynamic Adjustments: Use the bindings feature for on-the-fly modifications Device Access: Be selective about device mappings; only share what is needed ","command-line-configuration#Command-Line Configuration":"You can override any configuration setting when running a container using command-line flags with the run command:\nrfswift run [flags] Available Flags Flags: -b, --bind string Extra bindings (separate with commas) -w, --bindedports string Ports to bind between host and container -a, --capabilities string Extra capabilities (separate with commas) -g, --cgroups string Extra cgroup rules (separate with commas) -e, --command string Command to execute (default: '/bin/bash') -s, --devices string Extra device mappings (separate with commas) -d, --display string Set X Display (default: \"DISPLAY=:0\") -z, --exposedports string Ports to expose -x, --extrahosts string Set extra hosts (default: 'pluto.local:192.168.1.2') -h, --help Help for run command -i, --image string Image to use (default: 'myrfswift:latest') -n, --name string Container name -t, --network string Network mode (default: 'host') -u, --privileged int Set privilege level (1: privileged, 0: unprivileged) -p, --pulseserver string PulseAudio server address (default: \"tcp:127.0.0.1:34567\") -m, --seccomp string Set Seccomp profile (default: 'default') Global Flags: -q, --disconnect Don't query updates (disconnected mode) Examples # Run with custom image and name rfswift run -i penthertz/rfswift:sdr_full -n my_sdr_container # Share a host directory with the container rfswift run -i penthertz/rfswift:sdr_full -b /home/user/captures:/data/captures # Add network capabilities for Wi-Fi tools rfswift run -i penthertz/rfswift:wifi -a NET_ADMIN # Use bridge network with port mapping rfswift run -i penthertz/rfswift:sdr_full -t bridge -w 8080:80/tcp # Specify a custom shell rfswift run -i penthertz/rfswift:sdr_full -e /bin/bash ","common-configuration-scenarios#Common Configuration Scenarios":"SDR Development Environment rfswift run -i penthertz/rfswift:sdr_full -n sdr_dev \\ -b ~/sdr_projects:/projects \\ -s /dev/ttyUSB0:/dev/ttyUSB0 Wi-Fi Security Testing rfswift run -i penthertz/rfswift:wifi -n wifi_testing \\ -a NET_ADMIN,NET_RAW \\ -b ~/wifi_captures:/captures Offline Device Analysis # Create a container with no network rfswift run -i penthertz/rfswift:reversing -n firmware_analysis \\ -t none \\ -b ~/firmware:/firmware ","dynamic-container-modification-with-bindings#Dynamic Container Modification with Bindings":"RF Swift offers a unique feature that Docker doesn‚Äôt provide natively: the ability to modify bindings for existing containers. This eliminates the need to recreate containers when you need to add or remove bindings.\nBindings Command Overview rfswift bindings This command has two subcommands:\nadd: Add a binding to an existing container rm: Remove a binding from an existing container Adding Bindings to Existing Containers To add a new binding to a running or stopped container:\nrfswift bindings add -c \u003ccontainer_name\u003e -t \u003ctarget_path\u003e [-s \u003csource_path\u003e] Parameters:\n-c, --container: Container name or ID (required) -t, --target: Path inside the container (required) -s, --source: Path on the host (optional, defaults to same as target) Examples:\n# Add a simple directory binding rfswift bindings add -c my_sdr_container -s /home/user/data -t /data # Add a device binding rfswift bindings add -c my_bt_container -s /dev/bluetooth -t /dev/bluetooth # When source and target are identical rfswift bindings add -c my_container -t /dev/ttyUSB0 Removing Bindings from Containers To remove an existing binding:\nrfswift bindings rm -c \u003ccontainer_name\u003e -t \u003ctarget_path\u003e [-s \u003csource_path\u003e] Example:\n# Remove a binding rfswift bindings rm -c my_container -t /data Docker API Version Compatibility If you encounter a Docker API version mismatch error:\nError response from daemon: client version 1.47 is too new. Maximum supported API version is 1.45 You can set the API version to match your Docker engine:\nsudo DOCKER_API_VERSION=1.45 rfswift bindings add -c my_container -s /tmp -t /root/myshare For persistent configuration, add this to your shell profile:\n# Add to ~/.bashrc, ~/.zshrc, etc. export DOCKER_API_VERSION=1.45 ","profile-configuration#Profile Configuration":"Configuration File Location RF Swift looks for a profile configuration file in a platform-specific location:\nLinuxWindowsmacOS /home/username/.config/rfswift/config.ini C:\\Users\\username\\AppData\\Roaming\\rfswift\\config.ini /Users/username/.config/rfswift/config.ini If this file doesn‚Äôt exist when you first run RF Swift, you‚Äôll be prompted to create one with default settings.\nConfiguration File Structure The config.ini file is organized into sections for different aspects of RF Swift‚Äôs behavior:\n[general] imagename = myrfswift:latest repotag = penthertz/rfswift [container] shell = /bin/zsh bindings = network = host exposedports = portbindings = x11forward = /tmp/.X11-unix:/tmp/.X11-unix xdisplay = \"DISPLAY=:0\" extrahost = pluto.local:192.168.2.1 extraenv = devices = /dev/bus/usb:/dev/bus/usb,/dev/snd:/dev/snd,/dev/dri:/dev/dri,/dev/input:/dev/input,/dev/vhci:/dev/vhci,/dev/console:/dev/console,/dev/vcsa:/dev/vcsa,/dev/tty:/dev/tty,/dev/tty0:/dev/tty0,/dev/tty1:/dev/tty1,/dev/tty2:/dev/tty2,/dev/uinput:/dev/uinput privileged = false caps = seccomp = cgroups = c 189:* rwm,c 166:* rwm,c 188:* rwm [audio] pulse_server = tcp:localhost:34567 Configuration Sections Explained General Section Parameter Description Example imagename Default image used when running containers without -i myrfswift:latest repotag Default repository for RF Swift images penthertz/rfswift ‚ÑπÔ∏è RF Swift images by default are built in Jammy version of Ubuntu, but are available in Beta version with Noble build. If you want to try Ubuntu Noble versions, please change repotag to penthertz/rfswift_noble. Container Section Parameter Description Example shell Default shell inside containers /bin/zsh bindings Host directories to share with containers /home/user/data:/data network Network mode for containers host, bridge, none exposedports Ports exposed from the container 8080, 443 portbindings Host-to-container port mappings 8080:80/tcp x11forward X11 binding for GUI applications /tmp/.X11-unix:/tmp/.X11-unix xdisplay X11 display environment variable \"DISPLAY=:0\" extrahost Custom host-to-IP mappings pluto.local:192.168.2.1 extraenv Additional environment variables VAR1=value1,VAR2=value2 devices Device mappings for hardware access /dev/bus/usb:/dev/bus/usb privileged Run containers in privileged mode false caps Linux capabilities to add NET_ADMIN,SYS_PTRACE seccomp Seccomp profile for syscall filtering /path/to/profile.json cgroups Control group rules for device access c 189:* rwm,c 166:* rwm Audio Section Parameter Description Example pulse_server PulseAudio/PipeWire server address tcp:localhost:34567 Changing repository RF Swift Ubuntu Noble (version 24.04) images are in the way, and you can also test them using the penthertz/rfswift_noble:\u003ctag\u003e prefix. In case you want to use Noble images with a short tag name, modify you RF Swift profile config.ini file as follows:\n[general] imagename = myrfswift:latest repotag = penthertz/rfswift_noble ... ","quiet-mode--disconnected-mode#Quiet Mode / Disconnected Mode":"RF Swift includes a global flag that allows you to run in ‚Äúdisconnected mode,‚Äù which prevents the tool from checking for updates or requiring internet connectivity:\nrfswift -q [command] # or rfswift --disconnect [command] When to Use Quiet Mode This mode is particularly useful in several scenarios:\nAir-gapped Environments: When working in secure environments without internet access Bandwidth-limited Situations: When working with limited connectivity (field operations, remote locations) Automated Scripts: When running RF Swift as part of automated workflows where update checks are not desired Rapid Execution: When you need immediate tool execution without the delay of update checking Examples # Run a container without checking for updates rfswift -q run -i sdr_full -n quick_analysis # List local images in disconnected mode rfswift --disconnect images local # Execute a command in a container without update checks rfswift -q exec -c my_container The quiet/disconnected mode can be combined with any RF Swift command and its respective options.\n‚ÑπÔ∏è Using quiet mode doesn‚Äôt affect RF Swift‚Äôs functionality‚Äîit only disables the automatic update checks. Consider periodically checking for updates manually with rfswift update to ensure you have the latest features and security improvements. ","rf-swift-configuration#RF Swift Configuration":"RF Swift ConfigurationRF Swift provides flexible configuration options to customize your environment. You can configure settings through a profile configuration file for persistent preferences or via command-line arguments for one-time adjustments."},"title":"Configurations"},"/docs/guide/host-actions/":{"data":{"audio-configuration#Audio Configuration":"Managing PulseAudio/PipeWire for Container Sound Many RF tools like GQRX, SDR++, and SDRAngel produce audio output that requires proper configuration to be heard on your host system. RF Swift provides commands to manage the PulseAudio/PipeWire server for this purpose.\nDiagnosing Audio Issues When audio is not properly configured, you‚Äôll see this warning when running a container:\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚ö†Ô∏è Warning ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Warning: Unable to connect to Pulse server at 127.0.0.1:34567 ‚îÇ ‚îÇ To install Pulse server on Linux, follow these steps: ‚îÇ ‚îÇ 1. Update your package manager: sudo apt update (for Debian-based) or sudo yum update (for Red ‚îÇ ‚îÇ Hat-based). ‚îÇ ‚îÇ 2. Install Pulse server: sudo apt install pulse-server (for Debian-based) or sudo yum install ‚îÇ ‚îÇ pulse-server (for Red Hat-based). ‚îÇ ‚îÇ After installation, enable the module with the following command as unprivileged user: ‚îÇ ‚îÇ ./rfswift host audio enable ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò This indicates that PulseAudio/PipeWire is not configured to accept TCP connections on the default address (127.0.0.1:34567).\nAudio Command Options The host audio command provides options to manage PulseAudio/PipeWire:\nrfswift host audio This displays available subcommands:\nManage pulseaudio server Usage: rfswift host audio [command] Available Commands: enable Enable connection unload Unload TCP module from Pulseaudio server Flags: -h, --help help for audio Enabling Audio Forwarding To enable audio in containers using the default configuration:\nrfswift host audio enable This command:\nLoads the PulseAudio/PipeWire TCP module Configures it to listen on 127.0.0.1:34567 Does not require sudo/administrator privileges You should see confirmation like:\n[+] Successfully loaded module-native-protocol-tcp with index 29 Custom Audio Configuration You can customize the listening address and port:\nrfswift host audio enable -s 10.0.0.1:34567 This allows audio forwarding across a network (useful for remote connections or VMs).\n‚ö†Ô∏è Security Note: Opening PulseAudio/PipeWire to network interfaces introduces potential security risks. Only use custom addresses on secure networks and consider using firewalls to restrict access. Disabling Audio Forwarding When you no longer need audio forwarding:\nrfswift host audio unload This removes the TCP module from PulseAudio/PipeWire, closing the network port.\nTroubleshooting Audio Issues If you continue to experience audio problems after enabling the server:\nVerify PulseAudio is running:\npulseaudio --check Restart PulseAudio if needed:\npulseaudio -k pulseaudio --start Check your container‚Äôs PULSE_SERVER environment variable:\nrfswift exec -c my_container echo $PULSE_SERVER It should show tcp:127.0.0.1:34567 (or your custom address)","common-device-examples#Common Device Examples":"RTL-SDR Setup After connecting an RTL-SDR device:\nOn Windows:\n# Identify device (typically has vendor ID 0bda) rfswift winusb list # Attach device (replace 1-2 with your device's BusID) rfswift winusb attach -i 1-2 On Linux:\n# Check if device is recognized lsusb | grep RTL # Run container with default USB bindings rfswift run -i sdr_full -n rtlsdr_container Using SDR Tools with Attached Devices Once your SDR device is properly attached, you can use tools like SDRAngel:\n# Inside your container sdrangel Running SDR Angel on Windows with RTL-SDR attached ","host-actions#Host Actions":"Host ActionsAfter learning how to run, configure, and manage RF Swift containers and images, this section covers important host-level operations that enhance the functionality of your RF tools and containers.","next-steps#Next Steps":"Continue to the file sharing section to learn how to exchange data between your host and containers:\nFile SharingLearn how to share files and directories between host and containers. ","usb-device-management#USB Device Management":"RF Swift provides platform-specific methods for managing USB devices, which is critical for SDR hardware.\nWindows USB Management On Windows, RF Swift includes the winusb command to simplify USB device sharing between the host and containers.\n‚ö†Ô∏è Prerequisites:\nusbipd must be installed Docker Desktop must be running Administrator privileges are required for attachment operations Listing Available USB Devices To see all USB devices connected to your system:\nrfswift winusb list This displays information about each device:\nUSB Devices: BusID: 1-2, DeviceID: 0bda:2838, VendorID: Bulk-In, ProductID: Interface, Description: Not shared BusID: 1-3, DeviceID: 8087:0032, VendorID: Intel(R), ProductID: Wireless, Description: Bluetooth(R) Not shared BusID: 1-4, DeviceID: 1532:0270, VendorID: USB, ProductID: Input, Description: Device, Razer Blade 14 Shared BusID: 2-4, DeviceID: 13d3:56d5, VendorID: Integrated, ProductID: Camera, Description: Integrated IR Camera Not shared Device Identification Strategy To easily identify a new device:\nRun rfswift winusb list before connecting your device Connect your device (e.g., RTL-SDR, HackRF, etc.) Run rfswift winusb list again to identify the new entry The newly appeared device is the one you want to share.\nAttaching USB Devices To share a device with containers, use the attach command with administrator privileges:\n# Run PowerShell as Administrator rfswift winusb attach -i 1-2 Where 1-2 is the BusID of your device from the list command.\nYou can verify the attachment was successful by running list again - the device should show as ‚ÄúAttached‚Äù rather than ‚ÄúNot shared‚Äù.\nAutomatic SDR Device Detection For common SDR devices, RF Swift can automatically detect and attach them:\n# Run PowerShell as Administrator rfswift winusb attach-all-sdrs This identifies common SDR devices by their vendor and product IDs and attaches them all at once.\nDetaching USB Devices When you‚Äôre finished using a device, you can detach it:\n# Run PowerShell as Administrator rfswift winusb detach -i 1-2 Linux USB Management On Linux, USB devices are typically accessible to containers through device bindings. You can:\nAdd devices during container creation:\nrfswift run -i sdr_full -n my_sdr -s /dev/ttyUSB0:/dev/ttyUSB0 Add devices to an existing container:\nrfswift bindings add -c my_sdr -s /dev/ttyUSB0:/dev/ttyUSB0 For SDR devices that use USB, ensure the relevant device files are bound:\nRTL-SDR: /dev/bus/usb (generally bound by default) Serial devices: /dev/ttyUSB0, /dev/ttyACM0, etc. HackRF: Typically accessible through /dev/bus/usb "},"title":"Host Actions"},"/docs/guide/list-of-images/":{"data":{"disk-space-considerations#Disk Space Considerations":"RF Swift images vary in size based on included tools:\nImage Type Typical Size Range Examples Base images 2-5 GB corebuild Specialized tools 5-10 GB bluetooth, wifi, reversing Comprehensive suites 10-20 GB sdr_full, telecom_5G Important Note on Actual Disk Usage: The sizes displayed by rfswift images local show the virtual size of each image. However, due to Docker‚Äôs layer-based architecture and the hierarchical structure of RF Swift images, the actual disk space used is often significantly less than the sum of all image sizes.\nFor example, if you have both sdr_light (9GB) and sdr_full (16GB) images:\nThe displayed total might suggest 25GB of usage The actual disk usage might be closer to 17GB since both images share common base layers This layer sharing happens automatically and is one of the key benefits of RF Swift‚Äôs hierarchical image design. When you pull multiple related images (like those in the same branch of the hierarchy diagram), you‚Äôre only downloading and storing the unique layers for each image.\nTo manage disk space efficiently:\nUse specialized images rather than all-inclusive ones when possible Leverage the image hierarchy - related images share layers and consume less space Remove unused images with rfswift delete -c image:tag Clean up unused containers with rfswift remove -c container_name Consider creating custom images with only the tools you need ","image-hierarchy#Image Hierarchy":"RF Swift images are structured in a layered hierarchy, with specialized images building on more general base images:\ngraph TD; A[corebuild]--\u003eB[sdrsa_devices]; A--\u003eC[rfid]; A--\u003eD[automotive]; A--\u003eE[reversing]; A--\u003eF[sdrsa_devices_antsdr]; A--\u003eG[sdrsa_devices_rtlsdrv4]; B[sdrsa_devices]--\u003eH[sdr_light]; B[sdrsa_devices]--\u003eI[bluetooth]; B[sdrsa_devices]--\u003eL[telecom_utils]; B[sdrsa_devices]--\u003eR[hardware]; B[sdrsa_devices]--\u003eS[network]; S[network]--\u003eJ[wifi]; L--\u003eM[telecom_2Gto3G]; L--\u003eN[telecom_4G_5GNSA]; L--\u003eO[telecom_5G]; H--\u003eK[sdr_full]This hierarchy provides several benefits:\nLayer reuse: Reduces overall disk space when using multiple images Consistency: Common tools are identical across related images Specialization: Higher-level images include more specialized tools Base for customization: You can build your own images starting from any level ","image-management-commands#Image Management Commands":"RF Swift offers the images command group to interact with both remote and local images:\nrfswift images --help Key subcommands include:\nremote: List available images from the repository local: List downloaded images on your system ","managing-local-images#Managing Local Images":"Listing Local Images To see images you‚Äôve already downloaded or created:\nrfswift images local This shows details about local images, including their status:\nüì¶ RF Swift Images ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Repository ‚îÇ Tag ‚îÇ Image ID ‚îÇ Created ‚îÇ Size ‚îÇ Status ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ myrfswift ‚îÇ latest ‚îÇ sha256:0bdb2 ‚îÇ 2024-09-01T00:56:27+02:00 ‚îÇ 16635.22 MB ‚îÇ Custom ‚îÇ ‚îÇ penthertz/rfswiftdev ‚îÇ sdr_full_amd64 ‚îÇ sha256:0bdb2 ‚îÇ 2024-09-01T00:56:27+02:00 ‚îÇ 16635.22 MB ‚îÇ Up to date ‚îÇ ‚îÇ penthertz/rfswiftdev ‚îÇ sdr_light_amd64 ‚îÇ sha256:476c0 ‚îÇ 2024-09-01T00:34:55+02:00 ‚îÇ 9617.12 MB ‚îÇ Up to date ‚îÇ ‚îÇ penthertz/rfswift ‚îÇ sdr_full ‚îÇ sha256:50ce1 ‚îÇ 2024-08-02T14:45:46+02:00 ‚îÇ 10383.56 MB ‚îÇ Custom ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Image Status Indicators:\nUp to date: Image matches the latest version in the repository Update available: A newer version exists in the repository Custom: Image has been modified locally (through tagging or container commits) Pulling Images To download an image from the repository:\nrfswift images pull -i sdr_light Options:\n-i, --image: Image tag to download (required) -t, --tag: Local tag to apply to the pulled image (optional) -r, --repository: Alternate repository source (optional) Example with custom tag:\nrfswift images pull -i sdr_full -t my_sdr:v1 Updating Images To update an image that shows ‚ÄúUpdate available‚Äù:\nrfswift images pull -i sdr_full RF Swift will automatically download the latest version.\nSaving and Loading Images For offline use or transfer between systems:\n# Export an image to a file rfswift images save -i sdr_light -o sdr_light.tar.gz # Import an image from a file rfswift images load -i sdr_light.tar.gz ","next-steps#Next Steps":"Explore these sections to learn more about available tools and configuration options:\nList of ToolsDetailed inventory of tools included in each image. ConfigurationsManage profiles and settings for RF Swift. ","recommended-images#Recommended Images":" Tag Supported OS x86_64/amd64 arm64/v8 riscv64 Description corebuild - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Base image including prerequisites for compiling tools and libraries for applications needing GUI and some other necessary tools sdrsa_devices - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Contains all drivers of devices included in sdrsa_devices.docker sdrsa_devices_antsdr - Linux - Windows ‚úÖ ‚úÖ ‚úÖ Contains all drivers of devices included in sdrsa_devices.docker but replacing official UHD drivers by ANTSDR ones sdrsa_devices_rtlsdrv4 - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Contains all drivers of devices included in sdrsa_devices.docker but replacing default RTL-SDR drivers to support v4 version for the RTL-SDR blog sdr_light - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Light image built for SDR uses with limited number of tools used in sdr_light.docker file sdr_light_intelgpu - Linux - Windows ‚úÖ ‚ùå ‚ùå same as sdr_light but with Intel GPU driver and gr-fosphor sdr_light_nvidiagpu - Linux - Windows ‚úÖ ‚ùå ‚ùå same as sdr_light but with NVidia GPU driver and gr-fosphor sdr_full - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Full image including all SDR tools used in sdr_full.docker file wifi_basic - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Wi-Fi image for security tests using tools included in wifi_basic.docker wifi_full - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Wi-Fi image for security tests using tools included in wifi_full.docker rfid - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ RFID image for security tests using tools included in rfid.docker reversing - Linux - Windows - macOS ‚úÖ ‚úÖ ‚ùå (not yet) Reversing image for security tests using tools included in reversing.docker automotive - Linux - Windows - macOS ‚úÖ ‚úÖ ‚ùå (not yet) Automotive image for security tests using tools included in automotive.docker bluetooth - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Bluetooth classic and LE image for security tests using tools in bluetooth.docker telecom_utils - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Telecom image for security tests using tools included in telecom_utils.docker telecom_2Gto3G - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Telecom image for security tests using tools included in telecom_2Gto3G.docker telecom_4G_5GNSA - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Telecom image for security tests using tools included in telecom_4G_5GNSA.docker telecom_5G - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Telecom image for security tests using tools included in telecom_4G_5GNSA.docker network - Linux - Windows - macOS ‚úÖ ‚úÖ ‚ùå (not yet) Image for reversing security tests using tools included in reversing.docker hardware - Linux - Windows - macOS ‚úÖ ‚úÖ ‚úÖ Image for hardware security tests using tools included in hardware.docker ","remote-image-repository#Remote Image Repository":"Listing Available Images To view all available images for your architecture from the official repository:\nrfswift images remote This command displays a table of available images with important details:\nüíø Official Images ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Tag ‚îÇ Pushed Date ‚îÇ Image ‚îÇ Architecture ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ sdr_full_nvidiagpu_amd64 ‚îÇ 2025-03-24T17:37:59Z ‚îÇ penthertz/rfswift:sdr_full_nvidiagpu_amd64 ‚îÇ amd64 ‚îÇ ‚îÇ hardware ‚îÇ 2025-03-24T17:33:21Z ‚îÇ penthertz/rfswift:hardware ‚îÇ amd64 ‚îÇ ‚îÇ sdr_full_intelgpu_amd64 ‚îÇ 2025-03-24T17:09:38Z ‚îÇ penthertz/rfswift:sdr_full_intelgpu_amd64 ‚îÇ amd64 ‚îÇ ‚îÇ sdr_full ‚îÇ 2025-03-24T16:43:07Z ‚îÇ penthertz/rfswift:sdr_full ‚îÇ amd64 ‚îÇ ‚îÇ telecom_5G ‚îÇ 2025-03-24T16:36:22Z ‚îÇ penthertz/rfswift:telecom_5G ‚îÇ amd64 ‚îÇ ... Understanding Image Tags The image naming system follows a consistent pattern:\nGeneric tags (e.g., sdr_full, bluetooth) work across supported architectures with multi-architecture builds Architecture-specific tags (e.g., sdr_light_amd64, bluetooth_arm64) target single architectures Specialized hardware tags (e.g., sdr_full_nvidiagpu_amd64) include optimizations for specific hardware ‚ÑπÔ∏è When in doubt, use the generic tags (without architecture suffix) as RF Swift will automatically select the correct version for your system. Use architecture-specific tags only when you need a particular variant. Core Image Categories Category Description Example Images SDR Software-defined radio tools sdr_light, sdr_full, sdr_full_nvidiagpu_amd64 Telecom Mobile network analysis telecom_utils, telecom_2Gto3G, telecom_4G_5GNSA, telecom_5G Short-range Bluetooth, Wi-Fi and RFID bluetooth, wifi, rfid Hardware Hardware security tools hardware, reversing Automotive Vehicle communications automotive Base images Foundation for other images corebuild, sdrsa_devices ","rf-swift-container-images#RF Swift Container Images":"RF Swift Container ImagesRF Swift provides a comprehensive set of container images to support various radio frequency and hardware security workflows. This guide explains how to manage these images and understand the available options."},"title":"Container Images"},"/docs/guide/list-of-tools/":{"data":{"image-hierarchy#Image Hierarchy":"Each RF Swift image builds upon a foundation of tools, with specialized images adding domain-specific capabilities. Understanding this hierarchy helps you choose the most appropriate image for your needs:\ngraph TD; A[corebuild]--\u003eB[sdrsa_devices]; A--\u003eC[rfid]; A--\u003eD[automotive]; A--\u003eE[reversing]; A--\u003eF[sdrsa_devices_antsdr]; A--\u003eG[sdrsa_devices_rtlsdrv4]; B[sdrsa_devices]--\u003eH[sdr_light]; B[sdrsa_devices]--\u003eI[bluetooth]; B[sdrsa_devices]--\u003eL[telecom_utils]; B[sdrsa_devices]--\u003eR[hardware]; B[sdrsa_devices]--\u003eS[network]; S[network]--\u003eJ[wifi]; L--\u003eM[telecom_2Gto3G]; L--\u003eN[telecom_4G_5GNSA]; L--\u003eO[telecom_5G]; H--\u003eK[sdr_full]","next-steps#Next Steps":"Continue to the Configurations page to learn how to customize your RF Swift environment:\nConfiguration OptionsCustomize your RF Swift environment for optimal performance. ","rf-swift-tool-collection#RF Swift Tool Collection":"RF Swift Tool CollectionRF Swift provides a comprehensive suite of specialized tools for radio frequency and hardware security work. This page catalogs the tools available in each pre-built image.\nüìà RF Swift is in active development. The tool collection is regularly expanded and optimized for all supported architectures. ","tool-categories#Tool Categories":"Core SDR Devices Support The sdrsa_devices image serves as the foundation for many RF Swift images, providing essential drivers and utilities for software-defined radio hardware.\nTool(s) Available commands amd64 aarch64 riscv64 Installation function UHD tools and libs (need to enable/disable options) uhd_adc_self_cal | uhd_fft | uhd_rx_cfile | uhd_cal_rx_iq_balance | uhd_find_devices | uhd_rx_nogui | uhd_cal_tx_dc_offset | uhd_image_loader | uhd_siggen | uhd_cal_tx_iq_balance | uhd_images_downloader | uhd_siggen_gui | uhd_config_info | uhd_modes.py | uhd_usrp_probe ‚úÖ ‚úÖ ‚úÖ uhd_devices_install RTL-tools and libs (need to enable/disable options) rtl_biast | rtl_fm | rtl_sdr | rtl_test | rtl_adsb | rtl_eeprom | rtl_power | rtl_tcp ‚úÖ ‚úÖ ‚úÖ rtlsdr_devices_install libiio and libad9361 iio_adi_xflow_check | iio_attr | iio_genxml | iio_info | iio_readdev |iio_reg | iio_stresstest | iio_writedev ‚úÖ ‚úÖ ‚úÖ ad_devices_install Nuand tools and lib bladeRF-cli | bladeRF-fsk ‚úÖ ‚úÖ ‚úÖ nuand_devices_install HackRF tools and lib hackrf_clock | hackrf_debug | hackrf_operacake | hackrf_sweep | hackrf_cpldjtag | hackrf_info | hackrf_spiflash | hackrf_transfer ‚úÖ ‚úÖ ‚úÖ hackrf_devices_install Airspry tools and lib airspy_gpio | airspy_rx | airspyhf_info | airspy_gpiodir | airspy_si5351c | airspyhf_lib_version | airspy_info | airspy_spiflash | airspyhf_rx | airspy_lib_version | airspyhf_calibrate | airspy_r820t | airspyhf_gpio ‚úÖ ‚úÖ ‚úÖ airspy_devices_install LimeSDR tools and lib LimeQuickTest | LimeSuiteGUI | LimeUtil ‚úÖ ‚úÖ ‚úÖ limesdr_devices_install Funcube tools and lib ‚úÖ ‚úÖ ‚úÖ funcube_devices_install XTRX tools and lib xtrx_fft ‚úÖ ‚úÖ ‚úÖ xtrx_devices_install OsmoFL2K tools and lib fl2k_file | fl2k_tcp | fl2k_fm | fl2k_test ‚úÖ ‚úÖ ‚úÖ osmofl2k_devices_install SignalHound Spike Spike ‚úÖ ‚ùå ‚ùå signalhound_spike_sa_device SignalHound VSG60 vsg60 ‚úÖ ‚ùå ‚ùå signalhound_vsg60_sa_device Harogic Devices sastudio ‚úÖ ‚úÖ ‚ùå harogic_sa_device RFNM ‚úÖ ‚úÖ ‚úÖ rfnm_devices_install LibreSDR B2x0 libresdr_swapfpga ‚úÖ ‚úÖ ‚úÖ libresdr_b2x0_devices_install pocketVNA pocketVNA ‚úÖ (not by default) ‚ùå ‚ùå pocketvna_sa_device LiteX M2SDR (Soapy Drivers) ‚úÖ ‚úÖ ‚úÖ litexm2sdr_devices_install HydraSDR tools and lib hydrasdr_gpio | hydrasdr_calibrate | hydrasdr_gpiodir | hydrasdr_lib_version | hydrasdr_reset | hydrasdr_set_rf_port | hydrasdr_spiflash | hydrasdr_gpio | hydrasdr_info hydrasdr_r82x | hydrasdr_rx | hydrasdr_si5351c ‚úÖ ‚úÖ ‚úÖ hydrasdr_rfone_install ‚ÑπÔ∏è Specialized Device Support:\nFor RTL-SDR v4 devices: Use the rtlsdrv4_devices_install function For ANTSDR devices: Use the antsdr__devices_install function Common Device Troubleshooting RTL-SDR Kernel Module Conflicts If your RTL-SDR device is unavailable when using tools like nfc-spy, the DVB-T kernel module may have claimed it. Blacklist the module with:\necho \"blacklist dvb_usb_rtl28xxu\" | sudo tee /etc/modprobe.d/blacklist-dvb_usb_rtl28xxu.conf You‚Äôll need to restart your host system after adding this blacklist entry.\nPlutoSDR Connection Issues If the PlutoSDR doesn‚Äôt appear with iio_info -s and you see errors like:\nwith backends: local xml ip usb Unable to create Local IIO context : No such file or directory (2) ERROR: Unable to create Avahi DNS-SD client :Daemon not running Scanning for IIO contexts failed: Text file busy (26) This can be resolved in two ways:\nOn Linux hosts: Ensure avahi-daemon is running on your host system Inside the container: Run the Avahi daemon with: avahi-daemon --no-drop-root --no-rlimits SDR Light Tools The sdr_light image includes essential software-defined radio tools for signal capture, analysis, and basic decoding.\nTool(s) Available commands amd64 aarch64 riscv64 Installation function GNU Radio gnuradio-companion | gnuradio-config-info | grcc ‚úÖ ‚úÖ ‚úÖ gnuradio_soft_install Common GNU Radio blocks ‚úÖ ‚úÖ ‚úÖ common_sources_and_sinks Soapy blocks and modules ‚úÖ ‚úÖ ‚úÖ install_soapy_modules SDR++ sdrpp ‚úÖ ‚úÖ ‚úÖ sdrpp_soft_fromsource_install retrogram /rftools/sdr/retrogram-soapysdr/retrogram-soapysdr ‚úÖ ‚úÖ ‚úÖ retrogram_soapysdr_soft_install kc908 SA GNU Radio blocks ‚úÖ ‚úÖ ‚úÖ kc908_sa_device LeoBodnar GPSDO v1 CLI /rftools/calibration/lbgpsdo/lbgpsdo.py ‚úÖ ‚úÖ ‚úÖ leobodnarv1_cal_device LeoBodnar GPSDO v2 CLI (lbe-142x) lbe-142x ‚úÖ ‚úÖ ‚úÖ leobodnarv2_cal_device GQRX gqrx ‚úÖ ‚úÖ ‚úÖ gqrx_soft_install URH urh | urh_cli ‚úÖ ‚úÖ ‚úÖ urh_soft_install (with HydraSDR and Harogic Support) inspectrum inspectrum ‚úÖ ‚úÖ ‚úÖ inspectrum_soft_install NanoVNASaver NanoVNASaver ‚úÖ ‚ùå (fix needed installing PyQT6) ‚ùì NanoVNASaver_cal_device_call NanoVNA-QT /rftools/calibration/NanoVNA-QT/run ‚úÖ ‚úÖ ‚úÖ NanoVNA_QT_cal_device KCSDI /rftools/calibration/Deepace/KCSDI-v0.4.5-45-linux-x86_64.AppImage ‚úÖ ‚ùå ‚úÖ KCSDI_cal_device rtl_433 rtl_433 ‚úÖ ‚úÖ ‚úÖ rtl_433_soft_install Jupyter lab + notebook jupiter ‚úÖ ‚úÖ ‚úÖ jupyter_soft_install Atermis Artemis ‚úÖ ‚úÖ ‚ùå (needs Pyside6) artemis_soft_install gqrx-scanner gqrx-scanner ‚úÖ ‚úÖ ‚úÖ gqrxscanner_sdr_soft_install gnsslogger gnsslogger ‚úÖ ‚úÖ ‚úÖ gnsslogger_cal_device soapy-rfnm ‚úÖ ‚úÖ ‚úÖ soapyrfnm_grmod_install LibreVNA LibreVNA-GUI ‚úÖ ‚úÖ (not installed by default) ‚úÖ (not installed by default) librevna_cal_device xnec2c xnec2c ‚úÖ ‚úÖ ‚úÖ xnec2c_cal_device SoapyHarogic ‚úÖ ‚úÖ ‚úÖ soapyharogic_grmod_install Lotus UP/DOWN converter budc_cli | budc_gui ‚úÖ ‚úÖ ‚úÖ lotus_budc_tune_device SDR Full Environment The sdr_full image builds on sdr_light to provide a comprehensive SDR development and analysis environment, including GNU Radio and specialized plugins.\nGNU Radio Out-Of-Tree Modules These modules extend GNU Radio‚Äôs capabilities for specific protocols and signal types:\nTool(s) amd64 aarch64 riscv64 OOT ‚Äì gr-gsm ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_lora ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_lorasdr ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_iridium ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_inspector ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_uaslink ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_X10 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_gfdm ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_aaoronia_rtsa ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_ccsds ‚ùå ‚ùå ‚ùå OOT ‚Äì gr_ais ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_dvbs2 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_tempest ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_dab ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_dect2 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_foo ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_ieee802-11 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_ieee802154 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_rds ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_droneid ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_satellites ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_adsb ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_keyfob ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_radar ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_nordic ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_paint ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_pdu_utils ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_sandia_utils ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_timing_utils ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_fhss ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-aistx ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-zwave_poore ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-mixalot ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr_DCF77_Receiver ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-j2497 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-airmodes ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-bb60_Receiver ‚úÖ ‚ùå ‚ùå OOT ‚Äì gr_fosphor ‚úÖ ‚ùì ‚ùì OOT ‚Äì gr-m17 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-gr-net ‚úÖ ‚úÖ ‚ùå (missing libpthread for now) OOT ‚Äì gr-aoa ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì grc-orrectiq ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-dsd ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-nrsc5 ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-ntsc-rc ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-nfc ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-fosphor (only with GPU images) ‚úÖ ‚úÖ ‚ùì OOT ‚Äì gr-mer ‚úÖ ‚úÖ ‚úÖ OOT ‚Äì gr-flarm ‚úÖ ‚úÖ ‚úÖ Additional SDR Software Tool(s) Available commands amd64 aarch64 riscv64 Installation function Nvidia OpenCL (to enable) ‚úÖ (not activated) ‚ùå ‚ùå In the docker file Intel OpenCL (to enable) ‚úÖ (not activated) ‚ùå ‚ùå In the docker file CyberEther cyberether ‚úÖ ‚úÖ ‚úÖ cyberther_soft_install SDR Angel sdrangel ‚úÖ ‚úÖ ‚úÖ sdrangel_soft_fromsource_install QSSTV qsstv ‚úÖ ‚úÖ ‚úÖ qsstv_soft_install Sigdigger SigDigger ‚úÖ ‚úÖ (but slow) ‚úÖ (but slow) sigdigger_soft_install ice_bluetooth ice9-bluetooth ‚úÖ ‚ùå ‚ùå ice9_bluetooth_soft_install Meshtastic SDR /rftools/sdr/meshtastic_sdr/ ‚úÖ ‚úÖ ‚úÖ meshtastic_sdr_soft_install gps_sdr_sim /rftools/sdr/gps-sdr-sim/ ‚úÖ ‚úÖ ‚úÖ gps_sdr_sim_soft_install nfc laboratory nfc-lab ‚úÖ ‚úÖ ‚úÖ nfclaboratory_soft_install Scikit-learn ‚úÖ ‚úÖ ‚úÖ ml_and_dl_soft_install pandas ‚úÖ ‚úÖ ‚úÖ ml_and_dl_soft_install seaborn ‚úÖ ‚úÖ ‚úÖ ml_and_dl_soft_install Tensorflow ‚úÖ ‚úÖ ‚úÖ ml_and_dl_soft_install Gpredict ‚úÖ ‚úÖ ‚úÖ ml_and_dl_soft_install v2verifier /rftools/sdr/v2verifier/ ‚úÖ ‚úÖ ‚úÖ v2verifier_sdr_soft_install wavingz /rftools/sdr/waving-z/build/ ‚úÖ ‚úÖ ‚úÖ wavingz_sdr_soft_install SatDump /rftools/sdr/SatDump/* ‚úÖ ‚úÖ ‚úÖ satdump_sdr_soft_install (with HydraSDR and Harogic Support) PySpecSDR /rftools/sdr/PySpecSDR/* ‚úÖ ‚úÖ ‚úÖ satdump_sdr_soft_install RFID Tools The rfid image focuses on radio-frequency identification analysis and exploitation:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function proxmark3 /rftools/rfid/proxmark3/ ‚úÖ ‚úÖ ‚úÖ proxmark3_soft_install libnfc and tools nfc-barcode | nfc-list | nfc-read-forum-tag3 | nfc-emulate-forum-tag4 | nfc-mfclassic | nfc-relay-picc | nfc-jewel | nfc-mfultralight | nfc-scan-device ‚úÖ ‚úÖ ‚úÖ libnfc_soft_install mfoc mfoc ‚úÖ ‚úÖ ‚úÖ mfoc_soft_install mfcuk mfcuk ‚úÖ ‚úÖ ‚úÖ mfcuk_soft_install mfread /rftools/rfid/mfdread/mfdread.py ‚úÖ ‚úÖ ‚úÖ mfread_soft_install ‚ö†Ô∏è RFID Device Requirements: When using RFID tools, you need to ensure that your RFID reader device (typically appearing as /dev/ttyACM0) is properly bound to the container:\n# When creating a new container rfswift run -i rfid -n rfid_tools -s /dev/ttyACM0:/dev/ttyACM0 # Or with an existing container rfswift bindings add -c rfid_tools -d -t /dev/ttyACM0 Bluetooth Analysis The bluetooth image contains specialized tools for Bluetooth protocol analysis and security testing:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function bettercap bettercap ‚úÖ ‚úÖ ‚úÖ bettercap_soft_install hcitools hciattach | hciconfig | hcidump | hcitool ‚úÖ ‚úÖ ‚úÖ blueztools_soft_install bluez tools ‚úÖ ‚úÖ ‚úÖ blueztools_soft_install mirage mirage ‚úÖ ‚úÖ ‚úÖ mirage_soft_install Sniffle with OpenDroneID encoder/decoder /rftools/bluetooth/Sniffle/ ‚úÖ ‚úÖ ‚úÖ sniffle_soft_install Kismet kismet ‚úÖ ‚úÖ ‚úÖ kismet_soft_install bluing /rftools/bluetooth/bluing/bluing/bin/ ‚úÖ ‚úÖ ‚úÖ bluing_soft_install bdaddr /rftools/bluetooth/bdaddr/bdaddr ‚úÖ ‚úÖ ‚úÖ bdaddr_soft_install WHAD whadup|wplay|wsniff|wfilter|wextract|wdump|wshark|wanalyze|winject|wserver|wble-central|wble-periph|wble-proxy|wble-spawn|wble-connect|wuni-scan|wuni-mouse|wuni-keyboard ‚úÖ ‚úÖ ‚úÖ whad_soft_install ‚ö†Ô∏è Required Capability: Bluetooth tools require the NET_ADMIN capability to function properly. Always include this capability when running the container:\nrfswift run -i bluetooth -n bt_tools -a NET_ADMIN Without this capability, many Bluetooth tools will fail with permission errors when attempting to configure network interfaces.\nWi-Fi Security The wifi image provides tools for Wi-Fi network analysis, packet capture, and security assessment:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function iproute2 ‚úÖ ‚úÖ ‚úÖ common_nettools macchanger macchanger ‚úÖ ‚úÖ ‚úÖ common_nettools tshart tshark ‚úÖ ‚úÖ ‚úÖ common_nettools aircrack-ng airbase-ng | aircrack-ng | airdecap-ng | airdecloak-ng | aireplay-ng | airmon-ng | airodump-ng | airodump-ng-oui-update | airolib-ng | easside-ng | etc. ‚úÖ ‚úÖ ‚úÖ aircrack_soft_install reaver reaver ‚úÖ ‚úÖ ‚úÖ reaver_soft_install bully bully ‚úÖ ‚úÖ ‚úÖ bully_soft_install pixiewps pixiewps ‚úÖ ‚úÖ ‚úÖ pixiewps_soft_install eaphammer /rftools/wifi/airgeddon/eaphammer ‚úÖ ‚úÖ ‚úÖ eaphammer_soft_install airgeddon /rftools/wifi/airgeddon/ ‚úÖ ‚úÖ ‚úÖ airgeddon_soft_install wifite2 /rftools/wifi/wifite2/ ‚úÖ ‚úÖ ‚úÖ wifite2_soft_install sparrow-wifi /rftools/sparrow-wifi/sparrow-wifi.py ‚úÖ ‚úÖ ‚úÖ sparrowwifi_sdr_soft_install krackattacks-scripts /rftools/wifi/krackattacks-scripts/* ‚úÖ ‚úÖ ‚úÖ krackattacks_script_soft_install ‚ö†Ô∏è Required Capability: Wi-Fi tools require the NET_ADMIN capability to manipulate wireless interfaces. Always include this capability when running the container:\nrfswift run -i wifi -n wifi_tools -a NET_ADMIN If you see errors about insufficient permissions when using Wi-Fi tools, this capability is likely missing.\nTelecommunications The telecommunications images are divided into several categories based on mobile network generations:\nTelecom Utilities Foundation tools for cellular network analysis:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function pycrate /telecom/pycrate/ ‚úÖ ‚úÖ ‚úÖ pycrate_soft_install CryptoMobile /telecom/CryptoMobile/ ‚úÖ ‚úÖ ‚úÖ cryptomobile_soft_install PySIM /telecom/SIM/pysim ‚úÖ ‚úÖ ‚úÖ pysim_soft_install sysmo-usim-tool /telecom/SIM/sysmo-usim-tool ‚úÖ ‚úÖ ‚úÖ sysmoUSIM_soft_install SCAT /telecom/scat ‚úÖ ‚úÖ ‚úÖ SCAT_soft_install SigPloit /telecom/2G/SigPloit ‚úÖ ‚úÖ ‚úÖ SigPloit_soft_install pysctp ‚úÖ ‚úÖ ‚úÖ pysctp_soft_install jSS7 /telecom/2G/jss7 ‚úÖ ‚ùì ‚ùì jss7_soft_install 2G/3G Analysis Tools Tools for GSM, UMTS, and related technologies:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function yatebts yate | yate-config | yate-qt5 ‚úÖ ‚úÖ ‚úÖ yatebts_blade2_soft_install OpenBTS /telecom/2G/OpenBTS/ ‚úÖ ‚ùå (need tests with other compiler) ‚ùå openbts_uhd_soft_install OpenBTS UMTS /telecom/3G/OpenBTS-UMTS/ ‚úÖ ‚ùå (need to fix ASN part) ‚ùå openbts_umts_soft_install OsmoBTS suite (including OsmoPCU + OsmoSGSN and others) osmo* tools with configs in /telecom/2G/osmocom/ ‚úÖ ‚úÖ ‚úÖ osmobts_suite_soft_install 4G/5G Analysis Tools Tools for LTE, 5G-NSA:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function srsRAN 4G, 5G NSA /telecom/4G/srsRAN_4G/ ‚úÖ ‚úÖ ‚úÖ srsran4G_5GNSA_soft_install 5G Analysis Tools Tools for 5G technologies:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function srsRAN 5G SA /telecom/5G/srsRAN_Project/ ‚úÖ ‚úÖ ‚úÖ srsran5GSA_soft_install Open5GS /telecom/5G/open5gs/ ‚úÖ ‚úÖ ‚úÖ Open5GS_soft_install UERANSIM /telecom/5G/UERANSIM ‚úÖ ‚úÖ ‚úÖ UERANSIM_soft_install Automotive Security The automotive image contains tools for vehicle network analysis and communication:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function Can-utils candump | canplayer | cansend | cangen | cansequence | cansniffer | canlogserver | bcmserver | socketcand | cannelloni | cangw | canbusload | can-calc-bit-timing | canfdtest | etc. (see: https://github.com/linux-can/can-utils) ‚úÖ ‚úÖ ‚ùå canutils_soft_install Cantact tools cantact ‚úÖ ‚úÖ ‚úÖ cantact_soft_install caringcaribou caringcaribou ‚úÖ ‚úÖ ‚úÖ caringcaribou_soft_install savvycan SavvyCAN ‚úÖ ‚úÖ ‚úÖ savvycan_soft_install gallia gallia ‚úÖ ‚úÖ ‚úÖ gallia_soft_install V2G Injector /automotive/V2GInjector/ ‚úÖ ‚úÖ ‚úÖ v2ginjector_soft_install Hardware Reverse Engineering The reversing image provides tools for firmware analysis and hardware reverse engineering:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function kataistruct kaitai-struct-compiler ‚úÖ ‚úÖ ‚ùì kataistruct_soft_install unicorn ‚úÖ ‚úÖ ‚ùì unicorn_soft_install keystone keytool ‚úÖ ‚úÖ ‚ùì keystone_soft_install radare2 radare2 | radiff2 ‚úÖ ‚úÖ ‚ùì radare2_soft_install ghidra ghidraRun ‚úÖ ‚úÖ ‚ùì ghidra_soft_install binwalk binwalk ‚úÖ ‚úÖ ‚ùì binwalk_soft_install binwalk v3 binwalkv3 ‚úÖ ‚úÖ ‚úÖ binwalk_soft_install cutter ‚úÖ ‚úÖ ‚ùå cutter_soft_install LLVM tools ‚úÖ ‚úÖ ‚ùì LLVM_install AFL++ afl-* ‚úÖ ‚úÖ ‚ùì AFL_install HongFuzz honggfuzz ‚úÖ ‚úÖ ‚ùì honggfuzz_install SemGrep semgrep ‚úÖ ‚úÖ ‚ùì semgrep_install C++ check cppcheck* ‚úÖ ‚úÖ ‚ùì cppcheck_install Clang static analyzer ‚úÖ ‚úÖ ‚ùì clang_static_analyzer_install Qiling ‚ùì ‚ùì ‚ùì qiling_soft_install ImHex ImHex ‚úÖ ‚úÖ ‚ùì imhex_soft_install Network Analysis The network image contains general network analysis and security tools:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function Nmap nmap ‚úÖ ‚úÖ ‚úÖ nmap_soft_install Wireshark wireshark ‚úÖ ‚úÖ ‚úÖ wireshark_soft_install Metasploit msf ‚úÖ (not tested) (not tested) metasploit_soft_install Tshark tshark ‚úÖ ‚úÖ ‚úÖ tshark_soft_install impacket impacket Python3 modules ‚úÖ ‚úÖ ‚úÖ impacket_soft_install AutoRecon autorecon ‚úÖ ‚úÖ (not tested) autorecon_soft_install Responder responder ‚úÖ ‚úÖ ‚úÖ responder_soft_install Kismet kismet ‚úÖ ‚úÖ ‚úÖ kismet_soft_install Bettercap bettercap ‚úÖ ‚úÖ ‚úÖ bettercap_soft_install sipvicious sipvicious_* ‚úÖ ‚úÖ ‚úÖ sipvicious_soft_install voipire voipire ‚úÖ ‚úÖ ‚úÖ voipire_soft_install sippts /opt/network/sippts/* ‚úÖ ‚úÖ ‚úÖ sippts_soft_install Caido caido ‚úÖ ‚úÖ ‚ùå caido_soft_install Hardware Security The hardware image focuses on general hardware security testing and analysis:\nTool(s) Available commands amd64 aarch64 riscv64 Installation function DSView DSView ‚úÖ ‚úÖ ‚úÖ dsview_install avrdude avrdude ‚úÖ ‚úÖ ‚úÖ avrdude_install flashrom flashrom ‚úÖ ‚úÖ ‚úÖ flashrom_install pulseview pulseview ‚úÖ ‚úÖ ‚úÖ pulseview_install openocd openocd ‚úÖ ‚úÖ ‚úÖ openocd_install dsl2sigrok dsl2sigrok ‚úÖ ‚úÖ ‚úÖ dsl2sigrok_install HydraNFC decoder (pulseview and DSView decoder) ‚úÖ ‚úÖ ‚úÖ hydranfc_trace_plugin_install arduino arduino ‚úÖ (not yet) (not yet) arduino_ide_install Saleae Logic 2 Logic-2 ‚úÖ ‚ùå ‚ùå logic2_saleae_install seergdb GUI seergdb ‚úÖ ‚úÖ ‚úÖ seergdb_install openFPGALoader openFPGALoader ‚úÖ ‚úÖ ‚úÖ openFPGALoader_install RFQuak rfq ‚úÖ ‚úÖ ‚úÖ rfquak_soft_install mtkclient /hardware/mtkclient/* ‚úÖ ‚úÖ ‚úÖ mtkclient_install esptool espefuse.py | esp_rfc2217_server.py | espsecure.py | esptool.py ‚úÖ ‚úÖ ‚úÖ esptool_install ","tool-usage-tips#Tool Usage Tips":"Tool Directory Organization RF Swift organizes tools in specialized directories for easier discovery:\n/rftools - Contains radio frequency analysis tools /hardware - Hardware security and testing tools /automotive - Vehicle communication and analysis tools /reverse - Reverse engineering and firmware analysis tools These directories complement the standard system paths (/usr/bin, /usr/local/bin) and contain specialized tools, scripts, and resources.\nFinding Available Tools To discover which tools are available in your current container:\n# List all executable commands in standard paths find /usr/bin /usr/local/bin -type f -executable | sort # List RF tools in the dedicated directory ls -la /rftools # List tools in other specialized directories ls -la /hardware ls -la /automotive ls -la /reverse // and more # Search for a specific tool across all locations find /usr/bin /usr/local/bin /rftools /hardware /automotive /reverse -name \"*sdr*\" -type f -executable Tool Documentation Most tools include built-in help available through the -h or --help flags:\ntool_name --help For more detailed documentation, many tools include man pages:\nman tool_name Creating Tool Aliases For frequently used tools with complex options, consider creating aliases in your container:\necho 'alias rtlpower-optimized=\"rtl_power -f 88M:108M:25k -g 50 -i 10 -e 1h power.csv\"' \u003e\u003e ~/.zshrc source ~/.zshrc "},"title":"Included Tools"},"/docs/guide/running-rf-swift/":{"data":{"advanced-features#Advanced Features":"Host Isolation RF Swift implements host isolation through several security mechanisms configured in your config.ini file:\n[container] privileged = false caps = seccomp = cgroups = c 189:* rwm,c 166:* rwm,c 188:* rwm Default Security Configuration By default, RF Swift runs containers in unprivileged mode with specific cgroup restrictions:\nUnprivileged Mode: Containers run without full root privileges on the host (privileged = false) Cgroup Restrictions: Controlled device access through character device major numbers: c 189:* rwm: Access to USB serial devices (ttyUSB*) c 166:* rwm: Access to ACM devices (ttyACM*) c 188:* rwm: Access to USB serial converters This provides a reasonable balance between functionality and security for RF applications.\nCustomizing Security Settings You can customize security settings both in the config file and via command-line parameters:\nAdding Capabilities:\n# Via command line rfswift run -i sdr_full -n my_container -a NET_ADMIN,SYS_PTRACE # Via config.ini caps = NET_ADMIN,SYS_PTRACE Custom Seccomp Profile:\n# Via command line rfswift run -i sdr_full -n my_container -m /path/to/seccomp.json # Via config.ini seccomp = /path/to/seccomp.json Additional Cgroup Rules:\n# Via command line rfswift run -i sdr_full -n my_container -g \"c 226:* rwm\" # Via config.ini cgroups = c 189:* rwm,c 166:* rwm,c 188:* rwm,c 226:* rwm ‚ÑπÔ∏è Cgroup rules use the format type major:minor permission where:\ntype is c (character) or b (block) major:minor defines the device number (use * for wildcard) permission is r (read), w (write), m (mknod) For example, c 189:* rwm grants full access to all devices with major number 189.\nCommand-Line Security Configuration RF Swift allows you to override or extend security settings directly from the command line when running containers. This is particularly useful for one-off tasks or testing configurations before adding them to your config file.\nComplete List of Security-Related Flags:\nrfswift run [options] Security Options: -u, --privileged int Set privilege level (1: privileged, 0: unprivileged) -a, --capabilities string Extra capabilities (separate with commas) -g, --cgroups string Extra cgroup rules (separate with commas) -m, --seccomp string Set Seccomp profile ('default' one used by default) -s, --devices string Extra devices mapping (separate with commas) Network Options: -t, --network string Network mode (default: 'host') -z, --exposedports string Exposed ports -w, --bindedports string Ports to bind between host and container -x, --extrahosts string Set extra hosts (default: 'pluto.local:192.168.1.2') Resource Options: -b, --bind string Extra volume bindings (separate with commas) -d, --display string Set X Display (default \"DISPLAY=:0\") -p, --pulseserver string PULSE SERVER TCP address (default \"tcp:127.0.0.1:34567\") Examples of Command-Line Security Configurations:\nRun with specific privileges and capabilities:\nrfswift run -i penthertz/rfswift:wifi -n wifi_tools -u 0 -a NET_ADMIN,NET_RAW This runs a container in unprivileged mode but adds the NET_ADMIN and NET_RAW capabilities.\nAdd custom cgroup rules and device mappings:\nrfswift run -i penthertz/rfswift:sdr -n rtlsdr -g \"c 226:* rwm\" -s \"/dev/rtlsdr0:/dev/rtlsdr0\" This adds permission for device major number 226 and maps a specific RTL-SDR device.\nSet a custom seccomp profile:\nrfswift run -i penthertz/rfswift:security -n forensics -m ~/custom_seccomp.json This applies a custom seccomp profile to the container.\nCombined security settings:\nrfswift run -i penthertz/rfswift:bluetooth -n bt_scanner \\ -t bridge \\ -a NET_ADMIN \\ -g \"c 226:* rwm,c 116:* rwm\" \\ -s \"/dev/bluetooth:/dev/bluetooth\" \\ -u 0 This creates a container with:\nBridge networking mode NET_ADMIN capability Custom cgroup rules for devices with major numbers 226 and 116 Specific Bluetooth device mapping Unprivileged mode ‚ö†Ô∏è Command-line settings always take precedence over config file settings. When using both, command-line options will extend or override the corresponding settings in your config.ini file. ","command-overview#Command Overview":"Let‚Äôs explore the available commands with rfswift --help:\nrfswift --help [...] 888~-_ 888~~ ,d88~~\\ ,e, 88~\\ d8 888 \\ 888___ 8888 Y88b e / \" _888__ _d88__ 888 | 888 'Y88b Y88b d8b / 888 888 888 888 / 888 'Y88b, Y888/Y88b/ 888 888 888 888_-~ 888 8888 Y8/ Y8/ 888 888 888 888 ~-_ 888 \\__88P' Y Y 888 888 \"88_/ RF toolbox for HAMs and professionals rfswift is THE toolbox for any HAM \u0026 radiocommunications and hardware professionals Usage: rfswift [flags] rfswift [command] Available Commands: bindings Manage devices and volumes bindings commit Commit a container completion Generate the autocompletion script for the specified shell delete Delete an rfswift images exec Exec a command help Help about any command host Host configuration images RF Swift images management remote/local install Install function script last Last container run remove Remove a container rename Rename a container retag Rename an image run Create and run a program stop Stop a container update Update RF Swift Flags: -q, --disconnect Don't query updates (disconnected mode) -h, --help help for rfswift Use \"rfswift [command] --help\" for more information about a command. ‚ÑπÔ∏è Privilege requirements by platform:\nLinux: sudo is required for most container operations when not using Docker Desktop Windows/macOS: With Docker Desktop or OrbStack, sudo is not necessary Windows: Commands related to USB binding require Administrator privileges ","container-architecture-benefits#Container Architecture Benefits":"graph TD; A[Core build]--\u003eB[Image 1]; A--\u003eC[Docker image 2]; B--\u003eD[Container #1 from image 1]; B--\u003eE[Container #2 from image 1]; C--\u003eF[Container from image 2]This architecture provides significant advantages:\nPortability: Move environments between systems easily Isolation: Create separate environments for different tasks Disposability: Create, experiment with, and destroy environments without impact Specialization: Tailored environments for specific assessment needs Efficiency: No need to reinstall entire systems Performance: Less resource-intensive than VMs Time-saving: Quick deployment for last-minute assessment preparations ‚ÑπÔ∏è RF Swift significantly flattens the Docker learning curve while providing powerful features like dynamic device binding and host resource integration that would otherwise require considerable Docker expertise. ","core-workflows#Core Workflows":"1. Keeping RF Swift Updated RF Swift automatically checks for updates when launched:\n[!] You are running version: 0.4.8 (Obsolete) [+] Do you want to update to the latest version? (yes/no): You can also trigger updates manually:\nrfswift update [!] Your current version (0.4.8) is obsolete. Please update to version (v0.6.0). [+] Do you want to update to the latest version? (yes/no): yes Latest release download URL: https://github.com/PentHertz/RF-Swift/releases/download/v0.6.0/rfswift_linux_amd64 [+] Do you want to replace the existing binary with this new release? (yes/no): yes 13.67 MiB / 13.67 MiB [---------------------------------------------------------------------------------------------------------------------------------------------------------------------------] 100.00%% File downloaded and replaced successfully. 2. Image Management Customizing Image Tags You can rename image tags for convenience or to match your default configuration:\nrfswift retag -i penthertz/rfswiftdev:sdr_full_amd64 -t myrfswift:latest [+] You are running version: 0.4.9 (Up to date) [+] Image renamed! This allows you to use the default tag in your configuration file:\nLinuxWindowsmacOS cat /home/username/.config/rfswift/config.ini [general] imagename = myrfswift:latest ... type C:\\Users\\username\\AppData\\Roaming\\rfswift\\config.ini [general] imagename = myrfswift:latest ... cat /Users/username/.config/rfswift/config.ini [general] imagename = myrfswift:latest ... With the default tag set, you can simplify the run command:\nrfswift run -n my_container # Equivalent to: rfswift run -i myrfswift:latest -n my_container ‚ÑπÔ∏è Changing an image‚Äôs tag makes it a ‚Äúcustom‚Äù image in RF Swift, which means it won‚Äôt receive automatic updates from the official registry. 3. Container Management Creating and Running Containers Create a new container from an image:\nrfswift run -i sdr_full -n my_sdr_container Container Listing and Selection If you forget container names, use the last command:\nrfswift last ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚ÑπÔ∏è Up-to-date ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ You are running the latest version: 0.6.0-dev ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ü§ñ Last Run Containers ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ Created ‚îÇ Image Tag (ID) ‚îÇ Container Name ‚îÇ Container ID ‚îÇ Command ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ 2025-04-11T16:47:02+02:00 ‚îÇ penthertz/rfswift:hardware ‚îÇ hardware ‚îÇ b6e43a87e1f6 ‚îÇ /bin/zsh ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ 2025-04-11T16:23:43+02:00 ‚îÇ penthertz/rfswift:bluetooth ‚îÇ missionbluetooth ‚îÇ 3d92cb59560f ‚îÇ /bin/zsh ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ 2025-04-11T16:18:22+02:00 ‚îÇ penthertz/rfswift:rfid ‚îÇ missionrfid2 ‚îÇ 50cbccef53f5 ‚îÇ /bin/zsh ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ... Restarting Existing Containers To restart the most recently used container:\nrfswift exec To restart a specific container by name:\nrfswift exec -c my_sdr_container Container Lifecycle Management Save container changes as a new image:\nrfswift commit -c my_container -i my_new_image Rename a container:\nrfswift rename -n old_name -d new_name Remove a container:\nrfswift remove -c container_name Delete an image:\nrfswift delete -c penthertz/rfswift:tag_name 4. Device and Resource Management Audio Support RF Swift will warn if audio support is not properly configured:\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚ö†Ô∏è Warning ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Warning: Unable to connect to Pulse server at 127.0.0.1:34567 ‚îÇ ... ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Enable audio support (run without sudo):\nrfswift host audio enable [+] Successfully loaded module-native-protocol-tcp with index 29 Dynamic Device and Volume Binding One of RF Swift‚Äôs most powerful features is the ability to add or remove device bindings to running containers:\n# Add a USB device to an existing container rfswift bindings add -c my_container -d -s /dev/ttyUSB0:/dev/ttyUSB0 # For some destination, use shortcuts with -t only rfswift bindings add -c my_container -d -t /dev/ttyUSB0 # Add a shared folder rfswift bindings add -c my_container -b ~/projects:/root/projects # Remove a binding rfswift bindings rm -c my_container -t /dev/ttyUSB0 [-d] # List current bindings rfswift bindings list -c my_container Don‚Äôt forget the -d switch if you want to deal with devices and not volumes.\n5. Network Configuration RF Swift supports various network isolation modes:\nMode Description host No network isolation (default) bridge Default Docker network driver with isolation none Complete network isolation overlay Connect multiple Docker daemons ipvlan Full IPv4/IPv6 addressing control macvlan Assign MAC addresses to containers Example of using bridge mode with port mapping:\nrfswift run -i bluetooth -n my_container -t bridge -z 8000 -w 8000:127.0.0.1:80/tcp This command:\nUses the -t bridge option to enable bridge networking Maps container port 8000 to host port 80 on localhost with -w 8000:127.0.0.1:80/tcp Exposes port 8000 to other containers with -z 8000 ‚ö†Ô∏è For Wi-Fi and Bluetooth tools, you may need to add the NET_ADMIN capability: rfswift run -i wifi_tools -n my_container -a NET_ADMIN Be cautious when adding capabilities as they increase security risks if the container is compromised. ","important-settings#Important settings":"Important settingsRF Swift provides a streamlined command-line interface to manage containers for RF and hardware security applications. This guide covers essential commands and workflows.\n‚ö†Ô∏è On Linux, unless you are using Docker Desktop, you will need to use sudo with the rfswift command for operations that require elevated privileges. ","using-rf-tools#Using RF Tools":"Once your container is running, you can use any included RF tools. For example, with an SDR device connected:\n‚îå‚îÄ[root@topms] - [~] - [Tue Sep 03, 15:15] ‚îî‚îÄ[$]\u003e sdrangel Running SDRAngel with an RTL-SDR ‚ö†Ô∏è GUI applications require:\nLinux: xhost installed and configured macOS: XQuartz properly configured Windows: Native support via Docker Desktop "},"title":"Running RF Swift"},"/docs/guide/sharing-files/":{"data":{"best-practices-for-file-sharing#Best Practices for File Sharing":" Use Consistent Directory Structures: Create a standardized directory layout for your assessments to make file management easier Organize by Project: Create separate shared directories for different projects or assessments Keep User Data Separate: Use dedicated directories for user data, software configurations, and temporary files Bind Read-Only When Possible: For reference data that shouldn‚Äôt be modified, consider mounting as read-only Use Descriptive Container Names: Name containers based on their purpose to easily identify bound directories later ","device-binding-for-rf-hardware#Device Binding for RF Hardware":"Many RF tools require access to specific hardware devices. RF Swift makes it easy to bind these devices to your containers.\nCommon RF Device Bindings Device Type Host Path Container Path Required Capabilities RTL-SDR /dev/bus/usb /dev/bus/usb None HackRF /dev/bus/usb /dev/bus/usb None Proxmark3 /dev/ttyACM0 /dev/ttyACM0 None Bluetooth Adapters /dev/vhci /dev/vhci NET_ADMIN Wi-Fi Adapters /dev/ttyUSB0 /dev/ttyUSB0 NET_ADMIN Most RF Swift images automatically bind common device paths, but you may need to add specific devices or additional bindings for specialized hardware.\nRFID Device Binding For Proxmark3 and similar RFID tools, you may need to bind specific device paths:\n# Default Proxmark3 device rfswift run -i penthertz/rfswift:rfid -n rfid_scanner -s /dev/ttyACM0:/dev/ttyACM0 # For multiple Proxmark3 devices rfswift run -i penthertz/rfswift:rfid -n multi_proxmark \\ -s /dev/ttyACM0:/dev/ttyACM0,/dev/ttyACM1:/dev/ttyACM1 Bluetooth Device Binding For Bluetooth scanning and analysis:\nrfswift run -i penthertz/rfswift:bluetooth -n bt_scanner \\ -s /dev/vhci:/dev/vhci \\ -a NET_ADMIN ‚ö†Ô∏è Bluetooth and Wi-Fi tools typically require the NET_ADMIN capability in addition to device bindings. Add this with the -a NET_ADMIN parameter. ","file-sharing-between-host-and-container#File Sharing Between Host and Container":"Directory Binding The most common way to share files is by binding a directory from your host system to a location within the container using the -b parameter with the run command.\nBasic Directory Sharing First, create a directory on your host system: # Create a directory on your host mkdir -p ~/shared_data Start a container with this directory bound to a location inside the container: rfswift run -i penthertz/rfswift:telecom -n telecom_analysis -b ~/shared_data:/root/shared This binds your host‚Äôs ~/shared_data directory to /root/shared inside the container.\nMultiple Directory Bindings You can bind multiple directories by separating them with commas:\nrfswift run -i penthertz/rfswift:sdr_full -n sdr_project \\ -b ~/captures:/root/captures,~/scripts:/root/scripts,~/reports:/root/reports ‚ö†Ô∏è Always specify paths in the format host_path:container_path, and separate multiple bindings with commas. Verifying Bindings The container summary will display all active bindings:\nüßä Container Summary ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ Container Name ‚îÇ telecom_analysis ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ X Display ‚îÇ :0 ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Shell ‚îÇ /bin/zsh ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Privileged Mode ‚îÇ true ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Network Mode ‚îÇ host ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Image Name ‚îÇ penthertz/rfswift:telecom ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Size on Disk ‚îÇ 11150.42 MB ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Bindings ‚îÇ /tmp/.X11-unix:/tmp/.X11-unix,/dev/bus/usb:/dev/bus/usb, ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ /home/user/shared_data:/root/shared ‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ Extra Hosts ‚îÇ pluto.local:192.168.2.1 ‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ Adding Bindings to Existing Containers If you forgot to bind a directory when creating a container, you can add it later using the bindings command:\nrfswift bindings add -c telecom_analysis -s ~/new_data -t /root/new_data Working with Shared Files Once your directories are bound, you can access them from within the container:\n# Inside the container cd /root/shared touch analysis_results.txt echo \"Signal detected at 915MHz\" \u003e analysis_results.txt The file will be immediately available on your host system at ~/shared_data/analysis_results.txt.\n‚ÑπÔ∏è File changes are bidirectional and immediate. Any changes made on either the host or container side will be instantly visible on the other side. ","next-steps#Next Steps":"Now that you understand how to share files and devices, you might want to create your own customized images:\nBuild Your Own ImageBecome a master chef and create your own custom RF Swift images. ","sharing-files-and-devices#Sharing Files and Devices":"Sharing Files and DevicesWhen conducting RF assessments with RF Swift, you‚Äôll need to exchange files between your host system and containers, as well as connect specialized hardware devices. This guide covers various file sharing methods and device binding techniques for common RF hardware.","specialized-hardware-configuration#Specialized Hardware Configuration":"Harogic Spectrum Analyzer Setup Harogic spectrum analyzers require calibration files to function properly. Here‚Äôs how to configure a container for use with these devices:\n1. Copy Calibration Files First, copy the calibration files from the provided USB to your host:\nContent of Harogic USB key # Copy from USB to host cp -R /media/username/37B6-82D6/CalFile ~/harogic_cal 2. Bind Calibration Directory When creating your container, bind the calibration directory to the proper location:\nrfswift run -i penthertz/rfswift:sdr_light -n harogic_analysis \\ -b ~/harogic_cal:/rftools/analysers/SAStudio4_x86_64_05_23_17_06/bin/CalFile 3. Run SAStudio Once inside the container, you can run SAStudio with the calibration files properly configured:\n# Inside the container sastudio Harogic device running with SaStudio Using Harogic with SDR++ To use Harogic devices with SDR++, copy the calibration files to the correct location:\n# Inside the container cp -R /rftools/analysers/SAStudio4_x86_64_05_23_17_06/bin/CalFile /usr/bin Then launch SDR++:\nsdrpp Running SDR++ with Harogic ","troubleshooting#Troubleshooting":"Permission Issues If you experience permission errors when accessing shared directories:\n# On the host, ensure proper ownership sudo chown -R your_username:your_username ~/shared_data # Or make the directory world-writable (less secure) chmod -R 777 ~/shared_data Missing Bindings If default bindings are missing, you can restore them while adding your custom bindings:\nrfswift run -i penthertz/rfswift:sdr_full -n sdr_analysis \\ -b /tmp/.X11-unix:/tmp/.X11-unix,/dev/bus/usb:/dev/bus/usb,~/my_data:/root/my_data "},"title":"Sharing Files \u0026 Devices"},"/docs/quick-start/":{"data":{"#":"Getting Up and Running with RF SwiftThis guide will help you quickly get started with RF Swift using pre-built binaries and container images.\n‚ö†Ô∏è On Linux, unless you are using Docker Desktop, you may need to use sudo with the rfswift command for operations that require elevated privileges. To install RF Swift, you can either use pre-compiled binaries and existing container images (quickest method) or compile the Go project and/or Docker images from source. This guide focuses on the fastest way to get up and running.\nInstall RF Swift Linux and macOS The easiest way to install RF Swift with this command line:\ncurl -fsSL \"https://get.rfswift.io/\" | sh But if you want to install it securely, we recommand using the installation script after downloading the latest version here:\n# Run the installation script ./install.sh The install.sh script will:\nInstall all required dependencies (Docker, BuildX, Go) Configure necessary services (xhost, PulseAudio) Set up proper permissions Create a system-wide alias for the rfswift command Install the latest RF Swift binary Alternative: from sources You can also download the latest (unstable) version from GitHub by cloning the repository, but you will need to build and use install.sh script as follows:\ngit clone https://github.com/PentHertz/RF-Swift.git cd RF-Swift # Step 1 - Building the project ./build_project.sh # Step 2 - Run the installation script ./install.sh Then you should have the binary installed as well as all the requirements ;)\nWindows or Manual Installation If you prefer manual installation or are using Windows:\nDownload the latest binary from the official repository ‚Üó Rename the binary to rfswift (or rfswift.exe on Windows) Make the binary executable (on Linux/macOS): chmod +x rfswift When you run the binary for the first time, it will guide you through configuration:\nrfswift Config file not found. Would you like to create one with default values? (y/n) Select y to create a default configuration file or n to configure manually.\nPull a Pre-built Image RF Swift provides several pre-built images to get you started quickly. For example, let‚Äôs pull a complete SDR image:\nrfswift images pull -i sdr_full You can also specify a custom tag for the image:\nrfswift images pull -i sdr_full -t my_custom_tag RF Swift Ubuntu Noble (version 24.04) images are in the way, and you can also test them using the penthertz/rfswift_noble:\u003ctag\u003e prefix. In case you want to use Noble images with a short tag name, modify you RF Swift profile config.ini file as follows:\n[general] imagename = myrfswift:latest repotag = penthertz/rfswift_noble ... Available Options:\n-i: Remote image label (required) -t: Local tag to assign to the pulled image (optional) -r: Repository to pull from (defaults to penthertz/rfswift) ‚ÑπÔ∏è You can use the complete image tag penthertz/rfswift:sdr_full if you prefer, or change the default repository in your RF Swift profile. Run the Container Once you have an image, you can create and run a container:\nrfswift run -i sdr_full -n my_sdr_container This will start a container using the sdr_full image with the name my_sdr_container.\n‚ö†Ô∏è With some plateforms, some default devices may be non-existant. Your can use bindings or modify RF Swift‚Äôs configuration file to remove the device from the mapped device list. Run Command Options:\nrfswift run -i sdr_full -n my_sdr_container The run command has numerous options for configuring your container environment:\nFlag Description -i, --image string Image name/tag to use (default: ‚Äòmyrfswift:latest‚Äô) -n, --name string Name for the container (makes it easier to reference later) -b, --bind string Extra bind mounts, separated by commas (e.g., /host/path:/container/path,/another/path:/in/container) -s, --devices string Extra device mappings in unprivileged mode, separated by commas (e.g., /dev/ttyUSB0:/dev/ttyUSB0) -a, --capabilities string Extra Linux capabilities, separated by commas (e.g., NET_ADMIN,SYS_ADMIN) -t, --network string Network mode (default: ‚Äòhost‚Äô) -u, --privileged int Set privilege level (1: privileged, 0: unprivileged) -e, --command string Command to execute (default: ‚Äò/bin/bash‚Äô) -d, --display string Set X Display (duplicates host‚Äôs env by default) (default ‚ÄúDISPLAY=:0‚Äù) -p, --pulseserver string PulseAudio server TCP address (default: ‚Äútcp:127.0.0.1:34567‚Äù) -w, --bindedports string Ports to bind (between container and host) -z, --exposedports string Ports to expose -x, --extrahosts string Set extra hosts (default: ‚Äòpluto.local:192.168.1.2‚Äô), separated by commas -g, --cgroups string Extra cgroup rules, separated by commas -m, --seccomp string Set Seccomp profile (default: ‚Äòdefault‚Äô) Share Files with the Container:\nTo share files between your host system and the container:\nrfswift run -i sdr_full -n my_sdr_container -b ~/sdr_projects:/home/user/projects You can bind multiple directories by separating them with commas:\nrfswift run -i sdr_full -n my_sdr_container -b ~/sdr_projects:/home/user/projects,~/datasets:/home/user/data Share Specific Devices:\nWhen running in unprivileged mode, you can share specific devices:\nrfswift run -i sdr_full -n my_sdr_container -s /dev/ttyUSB0:/dev/ttyUSB0 Multiple devices can be shared by separating them with commas:\nrfswift run -i sdr_full -n my_sdr_container -s /dev/ttyUSB0:/dev/ttyUSB0,/dev/ttyACM0:/dev/ttyACM0 ‚ÑπÔ∏è If you plug the device after the container has started, or replug it later, you will have to stop it with command rswift stop -c \u003ccontainer name\u003e. You can avoid this manipulation by mounting /dev/bus/usb:/dev/bus/usb as a volum instead with option -b when creating and running the container. This last manipulation may degrade the container‚Äôs isolation, especially if you disable X11 manually too. Add Linux Capabilities:\nFor Wi-Fi and Bluetooth tools, you may need additional Linux capabilities:\nrfswift run -i wifi_tools -n my_wifi_container -a NET_ADMIN For multiple capabilities:\nrfswift run -i advanced_tools -n my_container -a NET_ADMIN,SYS_ADMIN ‚ö†Ô∏è Security Consideration: Be cautious when adding capabilities like NET_ADMIN. If the container becomes compromised, malicious programs could capture or manipulate network interfaces! Only add capabilities that are strictly necessary for your work. Network Configuration:\nBy default, containers use the host network mode. To use a different network:\nrfswift run -i sdr_full -n my_sdr_container -t bridge Privilege Levels:\nControl container privilege level:\n# Run in unprivileged mode rfswift run -i sdr_full -n my_sdr_container -u 0 # Run in privileged mode (use with caution) rfswift run -i sdr_full -n my_sdr_container -u 1 Custom Commands:\nRun a specific command instead of the default shell:\nrfswift run -i gnuradio -n signal_processor -e \"gnuradio-companion\" ‚ÑπÔ∏è Using a named container with the -n flag makes it much easier to restart or access the container later. Use RF Tools in the Container Once the container is running, you can use any of the pre-installed RF tools. For example, to run SDR++:\nConnect your SDR device to your computer Inside the container, run: sdrpp ‚ö†Ô∏è If you encounter audio issues, you can enable audio forwarding with: rfswift host audio enable This requires pulseaudio to be properly configured on your host system. USB Device Management USB device handling varies by platform:\nWindows USB Forwarding On Windows, you‚Äôll need to explicitly forward USB devices to your container using the winusb commands in Administrator mode:\n# List available USB devices on Windows rfswift winusb list # Attach a specific device on Windows rfswift winusb attach -i \u003cUSB ID\u003e Linux USB Device Access On Linux, you can access USB devices in two ways:\nDuring container creation - use the -s option to bind specific devices:\nrfswift run -i sdr_full -n my_container -s /dev/ttyUSB0:/dev/ttyUSB0 After container creation - use the powerful bindings feature to add devices to an existing container:\n# Add a new USB device to an existing container rfswift bindings add -c my_container -d -s /dev/ttyUSB0 -t /dev/ttyUSB0* # Same but shorter: Add a new USB device to an existing container with some destination rfswift bindings add -c my_container -t /dev/ttyUSB0 # Add a new volume to an existing container rfswift bindings add -c my_container -s /home/user/data -t /root/data # Remove a binding rfswift bindings rm -c my_container -s /dev/ttyUSB0 Note that to rebind a device, you need the -d switch.","common-commands-reference#Common Commands Reference":" Command Description rfswift run -i IMAGE -n NAME Create and run a new container rfswift exec -c CONTAINER Enter an existing container rfswift images local List available local images rfswift last List all containers rfswift host audio enable Enable audio forwarding rfswift host video enable Enable video forwarding ","creating-an-alias-linuxmacos#Creating an Alias (Linux/macOS)":"For convenience, you can create an alias to run RF Swift from anywhere. If you didn‚Äôt use the install.sh script (which creates this automatically), you can add an alias manually:\necho \"alias rfswift='$(pwd)/rfswift'\" \u003e\u003e \"$HOME/.$(basename $SHELL)rc\" source \"$HOME/.$(basename $SHELL)rc\" Replace $(pwd)/rfswift with the full path to your RF Swift binary.","getting-up-and-running-with-rf-swift#Getting Up and Running with RF Swift":"","managing-existing-containers#Managing Existing Containers":"Restart an Existing Container To return to a previously created container:\nrfswift exec -c my_sdr_container You can also use the short command if you want to recall the last container:\nrfswift exec This restarts the container if it‚Äôs stopped and gives you a shell inside it.\nList Running Containers View all RF Swift containers:\nrfswift last Save Container State If you‚Äôve made changes to a container that you want to preserve:\nrfswift commit -c my_sdr_container -i my_custom_image This saves the current state of the container as a new image.","next-steps#Next Steps":"Dive right into the following section to learn more:\nFollow the GuideRead the complete guide and learn how to use RF Swift for your daily assessments. "},"title":"üöÄ Quick Start"},"/docs/security/":{"data":{"-rf-swift-security-guidelines#üõ°Ô∏è RF Swift Security Guidelines":"üõ°Ô∏è RF Swift Security GuidelinesSecurity is a critical consideration when using RF Swift, as containerized environments often require special permissions to access hardware devices and network interfaces. This section provides comprehensive guidance on securing your RF Swift deployments while maintaining full functionality.","best-practices-at-a-glance#Best Practices at a Glance":" üîç Audit Permissions: Regularly review container privileges üîÑ Update Regularly: Keep RF Swift and images updated üß© Separate Workloads: Use dedicated containers for each assessment üö™ Remove When Done: Delete containers that are no longer needed üîí Monitor Usage: Watch for unusual container behavior ","container-security-philosophy#Container Security Philosophy":"With RF Swift you can also adopt a security philosophy of:\nPrinciple of Least Privilege: Containers start with minimal privileges Dynamic Enhancement: Add capabilities only when needed Separation of Concerns: Use dedicated containers for different tasks Defense in Depth: Multiple security layers working together ","key-security-areas#Key Security Areas":" Security GuidelinesEssential security practices for RF Swift ","reporting-security-issues#Reporting Security Issues":"If you discover a security vulnerability in RF Swift, please report it responsibly by:\nCreating a GitHub Issue marked as ‚ÄúSecurity Concern‚Äù Join our Discord for security discussions Contact Project Maintainers directly for critical vulnerabilities ‚ö†Ô∏è Remember that security is a balance. RF Swift needs certain privileges to function correctly, especially when working with hardware devices. Follow these guidelines to maintain that balance safely. ","security-quick-reference#Security Quick Reference":" Setting Command Security Impact Unprivileged Mode rfswift run -u 0 ‚úÖ Recommended: Reduces container privileges Minimal Capabilities rfswift run -a NET_ADMIN ‚úÖ Recommended: Only add required capabilities Network Isolation rfswift run -t bridge ‚úÖ Recommended: Isolates container network Device Restrictions rfswift run -g \"c 189:* rwm\" ‚úÖ Recommended: Limit device access Privileged Mode rfswift run -u 1 ‚ö†Ô∏è High Risk: Grants extensive privileges Default Network rfswift run -t host ‚ö†Ô∏è Medium Risk: Shares host network stack ","why-security-matters-for-rf-swift#Why Security Matters for RF Swift":"Radio frequency and hardware security work inherently requires elevated privileges. Balancing functionality with security is essential to:\nüîí Protect your host system from container exploits üõ°Ô∏è Prevent lateral movement if a container is compromised üîç Maintain isolation between different testing environments üß∞ Allow tools to function correctly with minimum necessary privileges "},"title":"üõ°Ô∏è Security"},"/docs/security/guide_lines/":{"data":{"-additional-resources#üìö Additional Resources":" Docker Security Documentation Linux Capabilities Documentation Seccomp Security Profiles for Docker Control Groups Documentation ","-balancing-security-and-functionality#üìà Balancing Security and Functionality":"RF Swift is designed for radio frequency and hardware security work, which inherently requires more privileges than typical containers. The key is finding the right balance:\nüéØ Task-specific containers: Create purpose-built containers with minimal privileges üîç Progressive enhancement: Start with minimal privileges and add only what‚Äôs needed ‚è±Ô∏è Temporary privileges: Use the bindings feature to add/remove privileges dynamically üß™ Test environment: Test containers in a controlled environment before deployment ","-container-security-parameters#üîê Container Security Parameters":"RF Swift provides several mechanisms to control container privileges and access:\nPrivileged Mode üö® rfswift run -u 1 # Privileged mode (1) rfswift run -u 0 # Unprivileged mode (0) ‚ö†Ô∏è Security Risk: Privileged containers can access all devices on the host and potentially escape container isolation.\nüõ°Ô∏è Recommendation: Use unprivileged mode (-u 0) whenever possible, which is the default in RF Swift.\nLinux Capabilities üß¢ Capabilities provide a more granular approach to permissions than privileged mode:\nrfswift run -a NET_ADMIN,SYS_PTRACE # Add specific capabilities Common Capabilities and Risks Capability Use Case Security Risk Recommendation NET_ADMIN Wi-Fi/Bluetooth tools Network traffic interception Only use with networking tools NET_RAW Raw socket access Packet spoofing Only use with specific networking tools SYS_PTRACE Debugging Process inspection, memory access Only use for debugging or reverse engineering SYS_ADMIN Mount operations Almost root equivalent Avoid unless absolutely necessary MKNOD Create device nodes Create arbitrary devices Rarely needed, avoid CHOWN Change file ownership Permission escalation Rarely needed for RF tools üõ°Ô∏è Recommendation: Only add the specific capabilities required for your tools. RF Swift automatically configures common capabilities for specific image types.\nSeccomp Profiles üîí Seccomp filters restrict the system calls a container can make:\nrfswift run -m /path/to/seccomp.json # Use custom seccomp profile üõ°Ô∏è Default Profile: RF Swift uses Docker‚Äôs default seccomp profile which blocks ~44 system calls out of 300+.\nCreating Custom Seccomp Profiles For highly sensitive environments, create a custom profile:\nStart with the default Docker profile Modify it to allow only required system calls Test thoroughly with your specific tools ‚ö†Ô∏è Warning: Overly restrictive seccomp profiles can cause tools to fail in unexpected ways.\nControl Groups (cgroups) üß© Cgroups limit container access to devices:\nrfswift run -g \"c 189:* rwm,c 166:* rwm\" # Allow specific device access Common cgroup Rules Rule Devices Use Case c 189:* rwm USB serial devices (ttyUSB*) RTL-SDR, HackRF c 166:* rwm ACM devices (ttyACM*) Proxmark3, Arduino c 188:* rwm USB serial converters Various adapters c 116:* rwm ALSA devices Audio capture c 226:* rwm DRI (GPU) OpenCL acceleration üõ°Ô∏è Format Explanation:\nc = character device, b = block device Major#:Minor# = device identifier (use * for all minor devices) r = read, w = write, m = mknod (create device files) ","-docker-permissions#üê≥ Docker Permissions":"Running Docker Without Sudo (Linux) üêß By default, Docker requires root privileges on Linux systems, but this can be a security concern. Here‚Äôs how to use Docker without sudo:\nCreate the docker group (if it doesn‚Äôt exist):\nsudo groupadd docker Add your user to the docker group:\nsudo usermod -aG docker $USER Apply the new group membership:\nnewgrp docker Verify it works:\ndocker run hello-world ‚ö†Ô∏è Security Implications: Users in the docker group effectively have root privileges on the host. Only add trusted users to this group.\nDocker Desktop Security (Windows \u0026 macOS) ü™ü üçé Docker Desktop provides a more user-friendly approach to permissions:\nWindows: Docker Desktop runs through a VM and doesn‚Äôt require admin rights for normal operation after installation macOS: Docker Desktop handles permissions through the application üîí Recommended Settings:\nEnable the ‚ÄúUse Docker Compose V2‚Äù option Enable the ‚ÄúUse containerd for pulling and storing images‚Äù option Keep Docker Desktop updated to the latest version ","-dynamic-permission-management#üîÑ Dynamic Permission Management":"One of RF Swift‚Äôs key advantages is the ability to add or remove permissions dynamically:\n# Temporarily add NET_ADMIN capability rfswift bindings add -c my_container -a NET_ADMIN # When finished with sensitive operations rfswift bindings remove -c my_container -a NET_ADMIN üõ°Ô∏è Best Practice: Add sensitive capabilities only when needed and remove them immediately afterward.","-keeping-updated#üîÑ Keeping Updated":"Security is an ongoing process. Stay informed about:\nüîî RF Swift updates üê≥ Docker security advisories üõ°Ô∏è Container security best practices ","-network-isolation#üåê Network Isolation":"Control the container‚Äôs network access for added security:\n# Complete network isolation rfswift run -t none -n isolated_container # Bridge network with limited connectivity rfswift run -t bridge -n bridge_container üõ°Ô∏è Network Modes:\nhost: Full network access (default, needed for many RF tools) bridge: Isolated network with optional port forwarding none: No network access (highest security) custom: Create custom networks for container-to-container communication ","-real-world-secure-configurations#üåü Real-World Secure Configurations":"SDR Work with Minimal Privileges # RTL-SDR with just the required devices rfswift run -i sdr_light -n secure_sdr -u 0 -g \"c 189:* rwm\" -t bridge Wi-Fi Assessment with Controlled Capabilities # Start with minimal privileges rfswift run -i wifi -n wifi_assessment -a NET_ADMIN Hardware Reverse Engineering with Isolation # Isolated environment for reverse engineering rfswift run -i reversing -n secure_reversing -u 0 -t none -s /dev/ttyUSB0:/dev/ttyUSB0 ","-rf-swift-security-guidelines#üõ°Ô∏è RF Swift Security Guidelines":"üõ°Ô∏è RF Swift Security GuidelinesThis document provides important security guidelines for using RF Swift in various environments. Following these recommendations will help you maintain a secure system while enjoying the full capabilities of RF Swift.","-security-checklist#üõ°Ô∏è Security Checklist":"Use this checklist for a secure RF Swift deployment:\n‚úÖ Use unprivileged mode by default ‚úÖ Add only required capabilities ‚úÖ Bind only the devices you need ‚úÖ Consider network isolation when possible ‚úÖ Keep RF Swift and Docker updated ‚úÖ Run containers with a non-root user when possible ‚úÖ Remove sensitive capabilities when not in use ‚úÖ Use separate containers for different tasks/assessments "},"title":"Security guidelines"}}